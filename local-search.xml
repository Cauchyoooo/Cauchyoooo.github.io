<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>烤面筋 01</title>
    <link href="/2025/01/15/2025/MJ-01/"/>
    <url>/2025/01/15/2025/MJ-01/</url>
    
    <content type="html"><![CDATA[<blockquote><p>赶鸭子上架的一些前端经验包</p></blockquote><span id="more"></span><h3 id="😈流程总结-日常实习一面">😈流程总结(日常实习一面)</h3><ul><li>面试官自我介绍（部门业务）</li><li>自我介绍-&gt;谈到以往项目（问挑战、解决方法、优化）-&gt;问现在课程，实习时间安排</li><li>笔试题30min - JS基础 -&gt; 讲解</li><li>反问</li></ul><blockquote><p>笔试题，这里直接写复盘和讲解后的答案</p></blockquote><h4 id="1-对象命名风格转换——下划线命名-驼峰命名">1. 对象命名风格转换——下划线命名=&gt;驼峰命名</h4><p><strong>题目描述</strong>：给定一个对象，要求将其下划线属性名转换成驼峰命名。</p><p><strong>思路</strong>：对象判空，对象中每个键值处理，属性名进行转换处理，包含嵌套对象要递归处理。</p><p><strong>关键点</strong>：转换方法，嵌套对象的递归处理</p><p><strong>意义</strong>：后端常使用下划线命名法，传过来的数据不符合前端习惯，要把它改成驼峰命名。</p><p><strong>JS代码</strong>：</p><p>仅下划线转驼峰</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据对象key下划线转驼峰</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; obj 对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">toCamelCase</span>(<span class="hljs-params">obj</span>) &#123;  <br>    <span class="hljs-comment">// 检查是否是对象并且不为空  </span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;  <br>            <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;  <br>                <span class="hljs-comment">// 使用正则表达式进行下划线到驼峰的转换  </span><br>                <span class="hljs-keyword">const</span> camelCaseKey = key.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/_([a-z])/g</span>, <span class="hljs-function">(<span class="hljs-params">match, letter</span>) =&gt;</span> letter.<span class="hljs-title function_">toUpperCase</span>());  <br><br>                <span class="hljs-comment">// 如果转换后的键与原键不同，进行属性重命名  </span><br>                <span class="hljs-keyword">if</span> (camelCaseKey !== key) &#123;  <br>                    obj[camelCaseKey] = obj[key];  <br>                    <span class="hljs-keyword">delete</span> obj[key];  <span class="hljs-comment">// 删除原来的键  </span><br>                &#125;  <br><br>                <span class="hljs-comment">// 递归调用处理嵌套对象  </span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[camelCaseKey] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj[camelCaseKey] !== <span class="hljs-literal">null</span>) &#123;  <br>                    <span class="hljs-title function_">toCamelCase</span>(obj[camelCaseKey]);  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>&#125;  <br><br></code></pre></td></tr></table></figure><p>仅驼峰转下划线</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * 数据对象key驼峰转下划线</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; obj 对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">toSnakeCase</span>(<span class="hljs-params">obj</span>) &#123;  <br>    <span class="hljs-comment">// 检查是否是对象并且不为空  </span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;  <br>            <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;  <br>                <span class="hljs-comment">// 使用正则表达式进行驼峰到下划线的转换  </span><br>                <span class="hljs-keyword">const</span> snakeCaseKey = key.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/([A-Z])/g</span>, <span class="hljs-function">(<span class="hljs-params">match</span>) =&gt;</span> <span class="hljs-string">`_<span class="hljs-subst">$&#123;match.toLowerCase()&#125;</span>`</span>);  <br><br>                <span class="hljs-comment">// 如果转换后的键与原键不同，进行属性重命名  </span><br>                <span class="hljs-keyword">if</span> (snakeCaseKey !== key) &#123;  <br>                    obj[snakeCaseKey] = obj[key];  <br>                    <span class="hljs-keyword">delete</span> obj[key];  <span class="hljs-comment">// 删除原来的键  </span><br>                &#125;  <br><br>                <span class="hljs-comment">// 递归调用处理嵌套对象  </span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[snakeCaseKey] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj[snakeCaseKey] !== <span class="hljs-literal">null</span>) &#123;  <br>                    <span class="hljs-title function_">toSnakeCase</span>(obj[snakeCaseKey]);  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><p>下划线和驼峰互换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据对象key 下划线驼峰互换</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Object</span>&#125; obj 对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; type 转换类型 camel-转驼峰 snake-转下划线</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">convertCase</span>(<span class="hljs-params">obj, type=<span class="hljs-string">&#x27;camel&#x27;</span></span>) &#123;  <br>    <span class="hljs-comment">// 检查是否是对象并且不为空  </span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;  <br>            <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;  <br>                <span class="hljs-keyword">let</span> newKey;  <br><span class="hljs-comment">// 转换方法 可以独立出来</span><br>                <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;camel&#x27;</span>) &#123;  <br>                    <span class="hljs-comment">// 将下划线转为驼峰命名  </span><br>                    newKey = key.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/_([a-z])/g</span>, <span class="hljs-function">(<span class="hljs-params">match, letter</span>) =&gt;</span> letter.<span class="hljs-title function_">toUpperCase</span>());  <br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;snake&#x27;</span>) &#123;  <br>                    <span class="hljs-comment">// 将驼峰命名转为下划线  </span><br>                    newKey = key.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/([A-Z])/g</span>, <span class="hljs-function">(<span class="hljs-params">match</span>) =&gt;</span> <span class="hljs-string">`_<span class="hljs-subst">$&#123;match.toLowerCase()&#125;</span>`</span>);  <br>                &#125;  <br><br>                <span class="hljs-comment">// 如果转换后的键与原键不同，进行属性重命名  </span><br>                <span class="hljs-keyword">if</span> (newKey !== key) &#123;  <br>                    obj[newKey] = obj[key];  <br>                    <span class="hljs-keyword">delete</span> obj[key];  <span class="hljs-comment">// 删除原来的键  </span><br>                &#125;  <br><br>                <span class="hljs-comment">// 递归调用处理嵌套对象  </span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[newKey] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj[newKey] !== <span class="hljs-literal">null</span>) &#123;  <br>                    <span class="hljs-title function_">convertCase</span>(obj[newKey], type);  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>&#125; <br></code></pre></td></tr></table></figure><p>转换方法若不用正则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;camel&#x27;</span>) &#123;  <br>    <span class="hljs-comment">// 将下划线转为驼峰命名  </span><br>    <span class="hljs-keyword">const</span> parts = key.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;_&#x27;</span>);  <span class="hljs-comment">// 使用 split 将字符串按下划线分割  </span><br>    newKey = parts[<span class="hljs-number">0</span>];  <span class="hljs-comment">// 保留第一个部分  </span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; parts.<span class="hljs-property">length</span>; i++) &#123;  <br>        newKey += parts[i].<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + parts[i].<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">// 将后续部分的首字母大写  </span><br>    &#125;  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type === <span class="hljs-string">&#x27;snake&#x27;</span>) &#123;  <br>    <span class="hljs-comment">// 将驼峰命名转为下划线  </span><br>    <span class="hljs-keyword">const</span> parts = key.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/(?=[A-Z])/</span>);  <span class="hljs-comment">// 在每个大写字母前插入下划线  </span><br>    newKey = parts.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">part</span> =&gt;</span> part.<span class="hljs-title function_">toLowerCase</span>()).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;_&#x27;</span>);  <span class="hljs-comment">// 转换为小写并连接  </span><br>&#125; <span class="hljs-keyword">else</span> &#123;  <br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Invalid conversion type. Use &#x27;camel&#x27; or &#x27;snake&#x27;.&quot;</span>);  <br>&#125;  <br></code></pre></td></tr></table></figure><p><strong>TS代码</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">CaseType</span> = <span class="hljs-string">&#x27;camel&#x27;</span> | <span class="hljs-string">&#x27;snake&#x27;</span>;  <br><br><span class="hljs-comment">// 定义对象类型，支持嵌套对象  </span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">GenericObject</span> = &#123;  <br>    [<span class="hljs-attr">key</span>: <span class="hljs-built_in">string</span>]: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span> | <span class="hljs-built_in">boolean</span> | <span class="hljs-title class_">GenericObject</span> | <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">any</span>&gt;;  <br>&#125;;  <br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">convertCase</span>(<span class="hljs-params"><span class="hljs-attr">obj</span>: <span class="hljs-title class_">GenericObject</span>, <span class="hljs-attr">type</span>: <span class="hljs-title class_">CaseType</span></span>): <span class="hljs-built_in">void</span> &#123;  <br>    <span class="hljs-comment">// 检查是否是对象并且不为空  </span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> obj) &#123;  <br>            <span class="hljs-keyword">if</span> (obj.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;  <br>                <span class="hljs-keyword">let</span> <span class="hljs-attr">newKey</span>: <span class="hljs-built_in">string</span>;  <br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;camel&#x27;</span>) &#123;  <br>                    <span class="hljs-comment">// 将下划线转为驼峰命名  </span><br>                    newKey = key.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/_([a-z])/g</span>, <span class="hljs-function">(<span class="hljs-params">match, letter</span>) =&gt;</span> letter.<span class="hljs-title function_">toUpperCase</span>());  <br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> === <span class="hljs-string">&#x27;snake&#x27;</span>) &#123;  <br>                    <span class="hljs-comment">// 将驼峰命名转为下划线  </span><br>                    newKey = key.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/([A-Z])/g</span>, <span class="hljs-function">(<span class="hljs-params">match</span>) =&gt;</span> <span class="hljs-string">`_<span class="hljs-subst">$&#123;match.toLowerCase()&#125;</span>`</span>);  <br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    <span class="hljs-comment">// 如果 type 无效，则抛出错误  </span><br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Invalid conversion type. Use &#x27;camel&#x27; or &#x27;snake&#x27;.&quot;</span>);  <br>                &#125;  <br><br>                <span class="hljs-comment">// 如果转换后的键与原键不同，进行属性重命名  </span><br>                <span class="hljs-keyword">if</span> (newKey !== key) &#123;  <br>                    obj[newKey] = obj[key];  <br>                    <span class="hljs-keyword">delete</span> obj[key];  <span class="hljs-comment">// 删除原来的键  </span><br>                &#125;  <br><br>                <span class="hljs-comment">// 递归调用处理嵌套对象  </span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[newKey] === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; obj[newKey] !== <span class="hljs-literal">null</span>) &#123;  <br>                    <span class="hljs-title function_">convertCase</span>(obj[newKey] <span class="hljs-keyword">as</span> <span class="hljs-title class_">GenericObject</span>, <span class="hljs-keyword">type</span>);  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure><h4 id="2-手写promise-all">2. 手写promise.all</h4><p><strong>题目描述</strong>：略</p><p><strong>思路</strong>：略</p><p><strong>关键点</strong>：对Promise的理解</p><p><strong>意义</strong>：例如请求数据时，是异步的操作，各种请求之间没有先后顺序，可以用来批量处理，节约时间提升性能。</p><p><strong>JS代码</strong> :</p><p>参考: <a href="https://github.com/Sunny-117/js-challenges/issues/1">https://github.com/Sunny-117/js-challenges/issues/1</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 得到一个新的Promise，该Promise的状态取决于proms的执行</span><br><span class="hljs-comment">   * proms是一个迭代器，包含多个Promise</span><br><span class="hljs-comment">   * 全部Promise成功，返回的Promise才成功，数据为所有Primsise成功的数据，并且顺序时按照传入的顺序排列</span><br><span class="hljs-comment">   * 只要有一个Promise失败，则=返回的Pormise失败，原因是第一个Promise失败的原因</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">iterator</span>&#125; <span class="hljs-variable">proms</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title class_">Promise</span>.<span class="hljs-property">all</span>=<span class="hljs-keyword">function</span> (<span class="hljs-params">proms</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPromise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> results = []; <span class="hljs-comment">//接受每个Promise成功后的结果</span><br>        <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// Promse计数总数</span><br>        <span class="hljs-keyword">let</span> fulfilledCount = <span class="hljs-number">0</span>; <span class="hljs-comment">// 已完成的数量</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> p <span class="hljs-keyword">of</span> proms) &#123;<br>          <span class="hljs-comment">// resolve([1,2,3,4])</span><br>          <span class="hljs-comment">// 思考：如何保证数组是有序的?如何知道啥时候所有promise都完成?</span><br>          <span class="hljs-keyword">let</span> i = count; <span class="hljs-comment">// 保存一下当前下标</span><br>          count++;<br><br>          <span class="hljs-comment">/**</span><br><span class="hljs-comment">           * 先包一下p,处理有直接写数字的情况</span><br><span class="hljs-comment">           */</span><br>          <span class="hljs-title class_">MyPromise</span>.<span class="hljs-title function_">resolve</span>(p).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">//异步，代码运行到这里，循环就已经结束了，因为在微队列</span><br>            fulfilledCount++;<br>            <span class="hljs-comment">// console.log(i);</span><br>            results[i] = data;<br>            <span class="hljs-comment">// results.push(data);不能用push</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fulfilledCount);<br>            <span class="hljs-keyword">if</span> (fulfilledCount === count) &#123;<br>              <span class="hljs-comment">// 当前是最后一个Promise完成了</span><br>              <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;全部完成&quot;</span>);<br>              <span class="hljs-title function_">resolve</span>(results);<br>            &#125;<br>          &#125;, reject);<br>        &#125;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count, fulfilledCount);<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 特殊情况1：传递空数组</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (count === <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-title function_">resolve</span>(results);<br>        &#125;<br>      &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>        <span class="hljs-title function_">reject</span>(error);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>      &#125;<br><br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 特殊情况2：执行中报错:try,catch</span><br><span class="hljs-comment">       */</span><br>    &#125;);<br>  &#125;<br>  <br>  <br>  <span class="hljs-comment">/*******test all *******/</span><br>  <br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 不仅可以传数组，还可以传递迭代器。不是所有迭代器都支持for循环，所以。。。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>  <span class="hljs-title class_">MyPromise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-number">1</span>),<br>  <span class="hljs-title class_">MyPromise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>),<br>  <span class="hljs-title class_">MyPromise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">3</span>),<br>  <span class="hljs-number">4</span>,<br>]).<span class="hljs-title function_">then</span>(<br>  <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// data:[1,2,3,4]</span><br>    <span class="hljs-comment">// 传递[pro1,pro2,pro3,4]的话:内部默认处理Promise.resolve(4)</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;成功&quot;</span>, data);<br>  &#125;,<br>  <span class="hljs-function">(<span class="hljs-params">reason</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// reason:reason2</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;失败&quot;</span>, reason);<br>  &#125;<br>);<br></code></pre></td></tr></table></figure><h3 id="🍌总结">🍌总结</h3><p>因为准备得很仓促，看概念性东西比较多，也回顾了自己的项目，不过深度仍然不够。倒是没怎么准备笔试，所以就算挂了也正常。</p><p>倒是心态比以前好了很多，即使很抗拒面试，目前还是顺利结束了🎉，面试官很耐心，不过我要是准备多一些就好了哈哈</p><p>这个学期应该有时间准备接下来的东西，还是要多熟悉和学习js，ts，vue，react，好好准备笔面。别再像这回一样赶鸭子上架了🤗</p><h3 id="⭐补充">⭐补充</h3><p>一些uu提供的资源链接，目前还没怎么学习，慢慢来咯~</p><h5 id="算法题">算法题</h5><h5 id="JS">JS</h5><p>了解ES6的特性</p><h5 id="react">react</h5><p>vue也重要，理解响应式编程。</p><h5 id="css">css</h5><p>随缘，flex垂直居中，运气不好画三角形和乱七八糟的</p><h5 id="网络基础">网络基础</h5><h5 id="其他">其他</h5><p>webpack，vite，node.js开发。实际开发ts居多，看教程文档。</p>]]></content>
    
    
    <categories>
      
      <category>Front-end</category>
      
    </categories>
    
    
    <tags>
      
      <tag>front-end</tag>
      
      <tag>面筋</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新坑&lt;备忘&gt;</title>
    <link href="/2025/01/02/2025/Games101-00/"/>
    <url>/2025/01/02/2025/Games101-00/</url>
    
    <content type="html"><![CDATA[<blockquote><p>刚好下学期要选CG和VR两门课。想跟着Games101来学一下CG。</p><p>估计两门课都会认真学一下，在这里会复更一下。</p><p>另一方面，太久没更，这个博客用的主题也得更新一下哈哈！打算顺便重新装扮一下</p></blockquote><span id="more"></span><p>💅 mark一点资料：</p><p><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">Games 101网站链接</a></p><p><a href="http://games-cn.org/forums/topic/allhw/">Games 101作业链接</a></p><p>目前进度: <a href="https://www.bilibili.com/video/BV1X7411F744?spm_id_from=333.788.videopod.episodes&amp;vd_source=e218f5ce60f09f4f0dc35f89ecd9b4f5&amp;p=3">Games 101 Lec03</a> （也会从这一节开始更一点笔记）</p>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>games101</tag>
      
      <tag>computer graphic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Final: 粒子系统与流动效果</title>
    <link href="/2023/01/05/2023/Homework8/"/>
    <url>/2023/01/05/2023/Homework8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作业简介：</p><ol><li><p>粒子效果制作(Particle System)</p><p>ps: 多图警告！加载时间可能较长，有加速器会快一些，思维导图可新建页面打开图片看大图。</p></li></ol></blockquote><span id="more"></span><h2 id="粒子效果制作">粒子效果制作</h2><h3 id="一、设计要求">一、设计要求</h3><ul><li>粒子效果制作，必须带一个控制组件，控制粒子呈现效果。</li></ul><h3 id="二、项目地址">二、项目地址</h3><p><a href="https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw8/Assets">https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw8/Assets</a></p><h3 id="三、效果展示图">三、效果展示图</h3><p><img src="/img/2023/Homework8/show.gif" alt="show"></p><h3 id="四、写在前面">四、写在前面</h3><p>​Unity实现特效的方式多种多样，这里主要使用的是内置粒子系统(Particle System)。还有一种更高级的Visual Effect Graph(VFX Graph) 。课上听和做对粒子系统有初步的了解。课后又对每个模块仔细地再阅读，跟着一些视频实践了一番，增加了不少的理解。感觉还是有自己的理解后，才能更好地制作自己的五毛特效。特效这方面感觉和美术更相关，搭配好的素材能制作出更丰富的东西。</p><p>​这个特效，暂且称之为“雨云弹”特效吧。制作的灵感来源于《Splatoon 3》的大招墨雨云，因为做得不咋像就不放图了。用的是默认素材，真的是有手就能做。代码部分参考了之前做的射箭部分，主要用于获取并抛掷球体。当球体与地面碰撞时，触发该特效并销毁球体，也算是有一个控制组件呈现粒子特效啦<sup>-</sup>。</p><p>​那让我们开始吧。</p><h3 id="五、粒子系统模块简介">五、粒子系统模块简介</h3><p>🍭</p><h4 id="模块总结图">模块总结图</h4><p><img src="/img/2023/Homework8/ParticleSystem.png" alt="ParticleSystem"></p><ul><li>打“√”的模块是初始粒子系统默认勾选的，也是基本必须模块；打<u>下划线</u>的模块是“雨云弹”所用到的。</li><li>这些模块都可以通过脚本 <a href="https://docs.unity.cn/cn/2021.3/ScriptReference/ParticleSystem.html"><code>ParticleSystem.xx </code></a> 来访问使用。事实上，这里没有用脚本访问使用粒子系统，因为初始就直观地设定好了粒子效果，也无需在过程中修改它。</li></ul><p>🐾</p><h4 id="部分模块使用方法">部分模块使用方法</h4><p>如果能看懂英文的，可以通过鼠标在英文上悬停以了解功能介绍。这里只介绍部分常用的。</p><ul><li><p>仿真执行控制窗口</p><p>用于控制粒子系统在场景的播放演示，可以看到场景中的粒子属性如粒子数量、速度区间等。</p><p><img src="/img/2023/Homework8/win.png" alt="win"></p><ul><li><p>Play - 播放；Restart - 重置；Stop - 停止播放；Playback Speed - 播放速度；Playback Time - 已播放时间；</p><p>Resimulate - 勾选后，粒子效果的更新会同步到仿真窗口；</p></li></ul></li><li><p>Main 模块</p><p><img src="/img/2023/Homework8/main.png" alt="main"></p><ul><li><p>右边有三角形的都是下拉列表，可以更改选项或模式。右上角的&quot;＋&quot;号，可以选择显示所有模块或勾选的模块。</p></li><li><p>Duration - 粒子一次发射多久(若是循环模式，则为每轮发射时长)；Looping - 是否循环播放；</p><p>Start Delay - 延迟多久发射；Start Lifetime - 粒子生命周期(存活多久)；Start Speed - 初始速度；</p><p>Start Size - 初始大小；Start Rotation - 初始旋转角度；Start Color - 初始颜色；</p><p>Stop Action - 当粒子效果结束时，可以选择使该对象自动销毁等</p></li></ul></li><li><p>Curve 面板</p><p>当进行“大小数值”设置时，选择带有Curve的模式就会出现一条线，如果高亮该线就可以在Curve面板编辑它，不高亮时不代表没有应用，只是没有显示在面板里。</p><p><img src="/img/2023/Homework8/curve.png" alt="curve"></p><ul><li>最下方是一些系统预设，可通过实践来理解变化趋势。</li><li>面板左上角的数值是峰值。</li><li>在线上右键可以Add Key(新建关键帧)，右键Key可以编辑它的比例（如峰值是10，Edit Key的Value为0.3，则数值大小为3）。</li></ul></li><li><p>Gradient Editor 线性编辑器</p><p>当进行颜色设置，选择“Gradient”模式时，点击色条可打开编辑。</p><p><img src="/img/2023/Homework8/gradient.png" alt="gradient"></p><ul><li><p>Mode可以选择Blend或者Fixed，这个两端选择不同颜色，自己尝试一下就知道区别，一般使用Blend模式，过渡比较自然。</p></li><li><p>在色条上方或下方左键即可创建一个帧(小箭头)，点击它可编辑颜色或透明度。</p></li><li><p>色条上方的帧用于设置透明度，越黑表示越透明，Alpha为透明度数值(RGBA的A)，A越接近0越透明，Location表示在色条处于什么位置。</p></li><li><p>色条下方的帧用于设置颜色，经典的颜色面板，一看就懂。</p></li><li><p>Presets 有个 New，可以把当前的set保存为预设，方便重复使用。</p></li></ul></li><li><p>Emission 模块</p><p>粒子发射大致有3种方式，随时间发射、随距离变化发射、特定时间点发射，这三种模式可叠加使用。</p><p><img src="/img/2023/Homework8/emission.png" alt="emission"></p><ul><li><p>Rate over Time 为每秒发射的粒子数量。</p></li><li><p>Rate over Distance 为每发生单位距离变化发射的粒子数量。尾迹的制作很常用。</p></li><li><p>Burst模块可控制特定时间点(Time)发射的粒子数量(Count)，Cycles表示发射轮次，Interval表示轮次间隔时间，Probability表示发射的可能概率。</p></li></ul></li><li><p>Shape 模块</p><p>Shape 用于描述发射器的形状，即粒子沿着什么样的形状发射出去的。不同的shape会有不同的属性设置，在Texture上方的那部分。这里给出一些自己的理解例子。</p><p><img src="/img/2023/Homework8/shape.png" alt="shape"></p><ul><li>默认的Shape是Cone(圆锥)，将其Angle设为0就是圆柱，修改Thickness可以呈现环状。</li><li>Sphere是球状发射，Hemisphere是半球状发射，可用于一些需要中心向外发散的3d效果。</li><li>Box是盒装发射，也比较常用。修改Scale形成一定范围，粒子速度设为很小，在体积发射时，可以营造类似萤火虫等氛围感。</li><li>Circle圆、Edge边都是二维图形，也常用。圆可以作中心向外发散的2d效果，边可以作一些刀锋效果。</li></ul></li><li><p>Trails 模块</p><p>如果会用GameObject的Trail，这个是相通的。可以用于制作拖尾效果。本人对这个也是初步了解状态，只会做很简陋的效果。</p><p><img src="/img/2023/Homework8/trail.png" alt="trail"></p><ul><li>Mode模式选择：Particles是对每个粒子单独使用；Ribbon是通过粒子间连接形成。</li><li>Paricles模式：Ratio表示粒子会应用Trail的百分比；Lifetime为Trail的生命周期；Die with Particles表示是否随粒子销毁而销毁。</li><li>Ribbon模式：Ribbon count表示连线的数量，注意这个数量不要超过粒子发射的数量。</li></ul></li></ul><p>其他模块就不做介绍了，大多数看手册都能理解的。</p><h3 id="六、“雨云弹”制作">六、“雨云弹”制作</h3><p>​由于写详细教程会使篇幅太长，此处只放出相关参数图片。</p><p>​个人通用的制作思路是：整体形状-&gt;发射的时间、数量及速度-&gt;主要效果-&gt;颜色调整。</p><h5 id="“雨云弹”结构图">“雨云弹”结构图</h5><p>“雨云弹”分为四个部分：①上升雾，②云，③雨，④雨滴溅射。</p><p><img src="/img/2023/Homework8/%E5%AF%B9%E8%B1%A1%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="对象结构图"></p><p><strong>注</strong>：</p><ul><li>Transform 组件参数放进模块参数图里供作参考。</li><li>每个效果都不需要更改默认的Renderer渲染模块，勾上就行。</li></ul><p>🌁</p><h4 id="1-上升雾">1 上升雾</h4><h5 id="设计要点">设计要点</h5><ul><li>整体呈圆柱状上升喷射；</li><li>向上喷射速度快时间短，要有”嘭“的感觉；</li><li>有雾的绵密感。</li></ul><h5 id="效果图">效果图</h5><p><img src="/img/2023/Homework8/up.png" alt="up"></p><h5 id="模块参数图">模块参数图</h5><ul><li><p>Transform</p><p><img src="/img/2023/Homework8/1transform.png" alt="1transform"></p></li><li><p>Main</p><p><img src="/img/2023/Homework8/1main.png" alt="1main"></p></li><li><p>Emission</p><p><img src="/img/2023/Homework8/1emission.png" alt="1emission"></p></li><li><p>Shape</p><p><img src="/img/2023/Homework8/1shape.png" alt="1shape"></p></li><li><p>Color over Lifetime</p><p><img src="/img/2023/Homework8/1color.png" alt="1color"></p></li></ul><hr><p>☁️</p><h4 id="2-云">2 云</h4><h5 id="设计要点-v2">设计要点</h5><ul><li>整体呈中心水平向外扩散；</li><li>云的消散有渐隐效果；</li><li>云的运动有波动感。</li></ul><h5 id="效果图-v2">效果图</h5><p><img src="/img/2023/Homework8/cloud.png" alt="cloud"></p><h5 id="模块参数图-v2">模块参数图</h5><ul><li><p>Transform</p><p><img src="/img/2023/Homework8/2transform.png" alt="2transform"></p></li><li><p>Main</p><p><img src="/img/2023/Homework8/2main.png" alt="2main"></p></li><li><p>Emission</p><p><img src="/img/2023/Homework8/2emission.png" alt="2emission"></p></li><li><p>Shape</p><p><img src="/img/2023/Homework8/2shape.png" alt="2shape"></p></li><li><p>Velocity over Lifetime</p><p><img src="/img/2023/Homework8/2velocity.png" alt="2velocity"></p></li><li><p>Color over Lifetime</p><p><img src="/img/2023/Homework8/2color.png" alt="2color"></p></li><li><p>Size over Lifetime</p><p><img src="/img/2023/Homework8/2size.png" alt="2size"></p></li></ul><hr><p>🌧️</p><h4 id="3-雨">3 雨</h4><h5 id="设计要点-v3">设计要点</h5><ul><li>整体呈圆柱形向下喷射；</li><li>雨的下落要迅速，呈线状；</li><li>雨碰撞地面触发雨滴溅射效果。</li></ul><h5 id="效果图-v3">效果图</h5><p><img src="/img/2023/Homework8/down.png" alt="down"></p><h5 id="模块参数图-v3">模块参数图</h5><ul><li><p>Transform</p><p><img src="/img/2023/Homework8/3transform.png" alt="3transform"></p></li><li><p>Main</p><p><img src="/img/2023/Homework8/3main.png" alt="3main"></p></li><li><p>Emission</p><p><img src="/img/2023/Homework8/3emission.png" alt="3emission"></p></li><li><p>Shape</p><p><img src="/img/2023/Homework8/3shape.png" alt="3shape"></p></li><li><p>Size over Lifetime</p><p><img src="/img/2023/Homework8/3size.png" alt="3size"></p></li><li><p>Collision</p><p><img src="/img/2023/Homework8/3collision.png" alt="3collision"></p></li><li><p>Sub Emitters</p><p>需做好“<strong>4 雨滴溅射</strong>”部分再勾选修改该模块。</p><p><img src="/img/2023/Homework8/3sub.png" alt="3sub"></p></li><li><p>Trails</p><p><img src="/img/2023/Homework8/3trail.png" alt="3trail"></p></li></ul><hr><p>🍉</p><h4 id="4-雨滴溅射">4 雨滴溅射</h4><h5 id="设计要点-v4">设计要点</h5><ul><li>整体呈中心斜向上向外溅射；</li><li>雨滴溅射碰撞地面有反弹效果，营造动感。</li></ul><h5 id="效果图-v4">效果图</h5><p><img src="/img/2023/Homework8/circle.png" alt="circle"></p><h5 id="模块参数图-v4">模块参数图</h5><ul><li><p>Transform</p><p><img src="/img/2023/Homework8/4transform.png" alt="4transform"></p></li><li><p>Main</p><p><img src="/img/2023/Homework8/4main.png" alt="4main"></p></li><li><p>Emission</p><p><img src="/img/2023/Homework8/4emission.png" alt="4emission"></p></li><li><p>Shape</p><p><img src="/img/2023/Homework8/4shape.png" alt="4shape"></p></li><li><p>Color over Lifetime</p><p><img src="/img/2023/Homework8/4color.png" alt="4color"></p></li><li><p>Size over Lifetime</p><p><img src="/img/2023/Homework8/4size.png" alt="4size"></p></li><li><p>Noise</p><p><img src="/img/2023/Homework8/4noise.png" alt="4noise"></p></li><li><p>Collision</p><p><img src="/img/2023/Homework8/4collision.png" alt="4collision"></p></li></ul><hr><p>⭐</p><p><strong>注</strong>：</p><p>还有一件事，因为我在Rain空对象挂了一个只用Main的ParticleSystem组件，修改了生命周期，并将Stop Action设置为Destroy，效果类似于这个粒子播放xx时长，结束了这个对象就会自动销毁。因为在粒子系统触发脚本(ParticleTrigger)中，当球体与地面碰撞，这个粒子系统会作为预制件实例化，每撞一次就会实例化一次，如果不及时销毁就会一直在那里，但其实它播放一次就不再用了。</p><p>当然，如果不带这个组件，处理方式也可以修改为，一开始就在场景初始化这个粒子系统，并设置不播放，每检测碰撞，就对这个空对象下挂载的三个粒子系统进行同时播放一次。我觉得比较麻烦，就采取了第一种方法，这在性能方面可能有所增加。</p><p><img src="/img/2023/Homework8/5main.png" alt="5main"></p><h3 id="七、其他部分制作">七、其他部分制作</h3><h4 id="1-背景">1 背景</h4><p>​由5个带上黑色材质球的Plane简单拼凑组成，注意Plane的朝向并检查是否带有碰撞器。用于粒子系统碰撞及颜色衬托。</p><p><img src="/img/2023/Homework8/bg.png" alt="bg"></p><h4 id="2-球体">2 球体</h4><ul><li><p>一个带有Trail子对象的球体，组件勾上碰撞器，加入刚体和碰撞检测的脚本，设置如下图。</p><p><img src="/img/2023/Homework8/ball.png" alt="ball"></p></li><li><p>球体的Trail拖尾效果做得比较简陋，设置如下图。</p><p><img src="/img/2023/Homework8/btrail.png" alt="btrail"></p></li></ul><h4 id="3-相机">3 相机</h4><p>​新建Camera，通过<code>ctrl+shift+f</code>将当前场景的视角作为Camera的视角，这里添加了俯视DownCamera和仰视UpCamera的视角。通过脚本添加预制件及视角切换。</p><h3 id="八、部分代码">八、部分代码</h3><p>代码部分参考了之前做的射箭部分，主要用于获取并抛掷球体，也不是主要部分。</p><p>设计模式采用课堂上的设计模式，参考的UML图如下。画的很好了，这里就不重新画了。</p><p><img src="/img/2023/Homework8/design.png" alt="design"></p><h4 id="代码结构图">代码结构图</h4><p>日常上代码结构图，dddd。</p><p><img src="/img/2023/Homework8/Scripts.png" alt="Scripts"></p><h4 id="ParticleTrigger">ParticleTrigger</h4><p>粒子系统触发脚本。在球体碰撞的位置实例化粒子系统预制件Rain，它会自动播放的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ParticleTrigger</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionEnter</span>(<span class="hljs-params">Collision other</span>)</span><br>    &#123;<br>        GameObject Rain = GameObject.Instantiate&lt;GameObject&gt;(Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;Prefabs/Rain&quot;</span>));<br>        Rain.transform.position = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-keyword">this</span>.transform.position.x,<span class="hljs-number">0</span>,<span class="hljs-keyword">this</span>.transform.position.z);<br>        <span class="hljs-keyword">this</span>.gameObject.tag = <span class="hljs-string">&quot;Finish&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="BallFlyAction">BallFlyAction</h4><p>球体飞行运动。在初始给一个瞬间的力以添加初速度，然后给一个持续向下的力模拟重力。模拟一个斜向上抛体运动。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BallFlyAction</span> : <span class="hljs-title">SSAction</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Vector3 force = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>,<span class="hljs-number">80f</span>,<span class="hljs-number">30f</span>);<br>    <span class="hljs-keyword">private</span> Vector3 gravity = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>,<span class="hljs-number">-0.3f</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// public float speed;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BallFlyAction <span class="hljs-title">GetBallFlyAction</span>()</span>&#123;<br>        BallFlyAction action = ScriptableObject.CreateInstance&lt;BallFlyAction&gt;();<br>        <span class="hljs-keyword">return</span> action;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span>&#123;<br>        <br>        gameObject.GetComponent&lt;Rigidbody&gt;().isKinematic = <span class="hljs-literal">false</span>;<br>        gameObject.GetComponent&lt;Rigidbody&gt;().velocity = Vector3.zero;<br>        gameObject.GetComponent&lt;Rigidbody&gt;().AddForce(force,ForceMode.Impulse);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;   <br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.gameObject.tag == <span class="hljs-string">&quot;Finish&quot;</span>)&#123;<br>            <span class="hljs-keyword">this</span>.destroy = <span class="hljs-literal">true</span>;<br>        &#125;  <br>        gameObject.GetComponent&lt;Rigidbody&gt;().AddForce(gravity,ForceMode.Impulse);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Interface">Interface</h4><p>包括<code>IUserController</code>与<code>ISceneController</code>,分别对应用户操作接口与场景行为接口。</p><p>Init是获取球体，Shoot是发射球体，ChangeView用于切换视角，IsBallNull用于判断是否获取了球体；</p><p>LoadResource是实例化背景及相机。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IUserAction</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Init</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Shoot</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ChangeView</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> c</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">IsBallNull</span>()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ISceneController</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LoadResource</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="SceneController">SceneController</h4><p>场景控制器。用于控制整个场景，实现用户操作接口与场景行为接口。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SceneController</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IUserAction</span>, <span class="hljs-title">ISceneController</span><br>&#123;<br>    BallFactory factory;<br>    <span class="hljs-keyword">public</span> BallActionManager actionManager;<br>    <span class="hljs-keyword">public</span> myUserGUI userGUI;<br>    <span class="hljs-keyword">public</span> GameObject ball = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> Camera mainCamera;<br>    <span class="hljs-keyword">public</span> Camera upCamera;<br>    <span class="hljs-keyword">public</span> Camera downCamera;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        Director director = Director.getInstance();<br>        director.currentSceneController = <span class="hljs-keyword">this</span>;<br>        gameObject.AddComponent&lt;BallFactory&gt;();<br>        factory = Singleton&lt;BallFactory&gt;.Instance;<br>        actionManager = gameObject.AddComponent&lt;BallActionManager&gt;() <span class="hljs-keyword">as</span> BallActionManager;<br>        userGUI = gameObject.AddComponent&lt;myUserGUI&gt;() <span class="hljs-keyword">as</span> myUserGUI;<br>        mainCamera = Camera.main;<br>        LoadResource();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadResource</span>()</span><br>    &#123;<br>        GameObject.Instantiate&lt;GameObject&gt;(Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;Prefabs/Background&quot;</span>));<br>        upCamera = GameObject.Instantiate&lt;GameObject&gt;(Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;Prefabs/UpCamera&quot;</span>)).GetComponent&lt;Camera&gt;();<br>        downCamera = GameObject.Instantiate&lt;GameObject&gt;(Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;Prefabs/DownCamera&quot;</span>)).GetComponent&lt;Camera&gt;();<br>        ChangeView(<span class="hljs-string">&#x27;z&#x27;</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ChangeView</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> c</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;z&#x27;</span>)&#123;<br>            mainCamera.enabled = <span class="hljs-literal">true</span>;<br>            upCamera.enabled = <span class="hljs-literal">false</span>;<br>            downCamera.enabled = <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;x&#x27;</span>)&#123;<br>            mainCamera.enabled = <span class="hljs-literal">false</span>;<br>            upCamera.enabled = <span class="hljs-literal">true</span>;<br>            downCamera.enabled = <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            mainCamera.enabled = <span class="hljs-literal">false</span>;<br>            upCamera.enabled = <span class="hljs-literal">false</span>;<br>            downCamera.enabled = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Init</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(ball == <span class="hljs-literal">null</span>)&#123;<br>            ball = factory.GetBall();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Shoot</span>()</span><br>    &#123;<br>        actionManager.MoveBall(ball);<br>        ball = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        factory.FreeBall();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsBallNull</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> (ball == <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="myUserGUI">myUserGUI</h4><p>用户界面。用于监测按键及控制说明。按<code>z</code>,<code>x</code>,<code>c</code>可以切换视角，<code>space</code>可以获取球体，<code>j</code>可以发射球体。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">myUserGUI</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">private</span> IUserAction action;<br>    GUIStyle titleStyle = <span class="hljs-keyword">new</span> GUIStyle();<br>    GUIStyle textStyle = <span class="hljs-keyword">new</span> GUIStyle();<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span>&#123;<br>        action = Director.getInstance().currentSceneController <span class="hljs-keyword">as</span> IUserAction;<br><br>        titleStyle.normal.textColor = <span class="hljs-keyword">new</span> Color(<span class="hljs-number">0.9f</span>, <span class="hljs-number">0.65f</span>, <span class="hljs-number">0.99f</span>, <span class="hljs-number">1</span>);<br>        titleStyle.normal.background = <span class="hljs-literal">null</span>;<br>        titleStyle.fontSize = <span class="hljs-number">30</span>;<br>        titleStyle.alignment = TextAnchor.MiddleCenter;<br><br>        textStyle.normal.textColor = Color.white;<br>        textStyle.normal.background = <span class="hljs-literal">null</span>;<br>        textStyle.fontSize = <span class="hljs-number">20</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>(!action.IsBallNull())&#123;<br>            <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.J)) action.Shoot();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Space)) action.Init();<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.Z)) action.ChangeView(<span class="hljs-string">&#x27;z&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.X)) action.ChangeView(<span class="hljs-string">&#x27;x&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (Input.GetKeyDown(KeyCode.C)) action.ChangeView(<span class="hljs-string">&#x27;c&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>()</span> &#123;<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width<span class="hljs-number">-200</span>, <span class="hljs-number">5</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;粒子效果展示&quot;</span>, titleStyle);<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">12</span>, <span class="hljs-number">12</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;视角切换：z, x, c&quot;</span>, textStyle);   <br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">12</span>, <span class="hljs-number">42</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;取物：space&quot;</span>, textStyle);<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">12</span>, <span class="hljs-number">72</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;发射：j&quot;</span>, textStyle);    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="九、小结">九、小结</h3><ul><li>做粒子特效，除了灵感，理解也很重要，即使是默认素材，也能作出很多花样。</li><li>内置粒子系统还可用于做粒子流编程，作出一些流体效果，这里没有深入研究。</li><li>主要是学习了模块面板的使用，没怎么用api控制粒子系统，对api还不太熟悉。</li></ul><h3 id="十、参考">十、参考</h3><ul><li><a href="https://docs.unity.cn/cn/2021.3/Manual/ParticleSystemModules.html">Unity官方手册ParticleSystem</a></li><li><a href="https://www.bilibili.com/video/BV17V4y1K7Cn/?spm_id_from=333.999.0.0&amp;vd_source=e218f5ce60f09f4f0dc35f89ecd9b4f5">bilibili-梦小天幼的粒子系统详解系列视频</a></li><li><a href="https://www.bilibili.com/video/BV1yy4y1B7ir/?from=search&amp;seid=976722035306074353&amp;spm_id_from=333.337.0.0&amp;vd_source=e218f5ce60f09f4f0dc35f89ecd9b4f5">bilibili-Unity官方的粒子效果制作教学</a></li></ul><blockquote><p>2023.01.06Cauchy.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>particle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HW7: 模型与动画</title>
    <link href="/2022/12/18/2022/Homework7/"/>
    <url>/2022/12/18/2022/Homework7/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作业简介：</p><ol><li>智能巡逻兵(动画、订阅/发布模式)</li></ol></blockquote><span id="more"></span><p>🦊</p><h2 id="智能巡逻兵">智能巡逻兵</h2><h4 id="设计要求">设计要求</h4><ul><li>创建一个地图和若干巡逻兵（使用动画）；</li><li>每个巡逻兵走一个3-5个边的凸多边形，位置数据是相对地址。即每次确定下一个目标位置，用自己当前位置为原点计算；</li><li>巡逻兵碰撞到障碍物，则会自动选下一个点为目标；</li><li>巡逻兵在设定范围内感知到玩家，会自动追击玩家；</li><li>失去玩家目标后，继续巡逻；</li><li>计分：玩家每次甩掉一个巡逻兵计一分，与巡逻兵碰撞游戏结束；</li></ul><h4 id="程序设计要求">程序设计要求</h4><ul><li>必须使用订阅与发布模式传消息</li><li>工厂模式生产巡逻兵</li></ul><h4 id="项目地址">项目地址</h4><p><a href="https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw7/Assets">https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw7/Assets</a></p><h4 id="效果展示图">效果展示图</h4><p>地图展示</p><p><img src="/img/2022/Homework7/map.gif" alt="map"></p><p>游戏展示</p><p><img src="/img/2022/Homework7/game.gif" alt="game"></p><h4 id="玩法">玩法</h4><p>​你是一个狐狸妈咪，你在和你的7个小狐狸宝贝玩捉迷藏。你有一堆烦人的动物朋友，分别为猩猩、老虎和鸽子，你一靠近他们，他们就会追着你喋喋不休。要是被它们逮到，你就会被他们烦死。你要做的是快速地绕开你的烦人朋友，找到你的所有宝贝狐狸们。<strong>方向键控制行进，按住左shift键进行加速，鼠标右键移动视角。</strong></p><h3 id="1-预制件制作">1.  预制件制作</h3><p>本次作业选用了Asset store里的资源包<a href="https://assetstore.unity.com/packages/3d/characters/animals/quirky-series-animals-mega-pack-vol-2-183280">《Quirky Series Vol.2 [v1.3]》</a>。</p><p>角色主要分为3类：Player玩家：大狐狸；巡逻兵：其他动物；可拾取物体：小狐狸。</p><h4 id="组件设置">组件设置</h4><p>​点开Jungle Vol.1/Prefabs/RedPanda_LOD1，可以看到如图所示。为了简化模型，没有使用带有Lod Group的prefabs，这里选取的是较为精细的lod1。</p><p><img src="/img/2022/Homework7/01.png" alt="01"></p><p>​对于<strong>Player玩家</strong>来说，我们只需要在最外层的父对象挂一个rigidbody就行，碰撞检测的部分由其他碰撞体实现。该rigidbody属性如下图所示。这里为了方便没有使用重力。注意到Constraints处勾选了几项，是因为在调试过程中，遇到了<strong>碰撞抖动</strong>问题。本次作业角色移动没有利用物理学，碰撞后受力就会发生奇怪的运动。这里采取锁定刚体旋转和部分位移的方式解决。</p><p><img src="/img/2022/Homework7/02.png" alt="02"></p><p>​</p><p>​对于<strong>巡逻兵</strong>来说，在最外层的父对象挂上rigidbody和两个脚本（一个是属性脚本，一个是检测玩家碰撞的脚本）。这里的rigidbody和上述设置类似。创建Collider空子对象，挂上一个方盒碰撞器并设为触发器，再挂上一个用于检测玩家范围的脚本。巡逻兵大体都也是这样做。差异只在属性脚本和检测范围上面。</p><p><img src="/img/2022/Homework7/03.png" alt="03"></p><p><img src="/img/2022/Homework7/04.png" alt="04"></p><p>​对于<strong>拾取的物体</strong>来说，父对象挂一个碰撞器并设为触发器，再挂一个检测玩家碰撞的脚本即可。这里没有用mesh碰撞器，觉得拾取范围可以模糊一点。</p><p><img src="/img/2022/Homework7/05.png" alt="05"></p><h4 id="动画控制器制作">动画控制器制作</h4><p>​点开官方的AC_Red Panda(Animator Controller)，我们可以看到有两个层，一个是控制整体动作，一个是控制眼睛动作。其中，整体动作可以直接通过Inspector预览，而眼睛动作需要将模型拖到Inspector才可预览，也可直接先在官方给出的Demo场景中预览。</p><p><img src="/img/2022/Homework7/06.png" alt="06"></p><p><img src="/img/2022/Homework7/07.png" alt="07"></p><p>为了简单起见，本作业只用到了其中很少的动作。</p><p>​下图是Player的动画控制器，包含三个bool类型参数：存活live、是否行走isWalk、是否奔跑isRun。动作只有默认状态Idle、行走Walk、奔跑Run及死亡Death。这里Idle到Exit的过渡没有条件，会被系统自动忽略。</p><p><img src="/img/2022/Homework7/08.png" alt="08"></p><p>​下图是Idle过渡到Walk的设置。注意，这里的动作大多没有Exit Time，因为满足过渡条件时，如进入行走、进入攻击等动作变化需要马上执行，不需要等待上一个动作做完。</p><p><img src="/img/2022/Homework7/09.png" alt="09"></p><p>​下图是<strong>巡逻兵</strong>的动画控制器，这个更简单，其实只有行走和攻击两种状态，不过在游戏结束时，我们还是让它进入到静止状态的Idle。这里只是给出一个例子，不同的模型要匹配相应的模型动作，不然执行时模型会变成动画控制器的那个 (别问怎么知道的，问就是干过这种蠢事)。</p><p><img src="/img/2022/Homework7/10.png" alt="10"></p><p>​下图是<strong>拾取的物体</strong>的动画控制器，由于动作比较简单，也加入了眼睛的变化。没被找到时，就坐在原地哭唧唧，被找到后就高兴跳起来。</p><p><img src="/img/2022/Homework7/11.png" alt="11"><img src="/img/2022/Homework7/12.png" alt="12"></p><p>到此，角色的预制件就做得差不多了。后面就是根据实际情况，还要去预先设计并记录一下巡逻兵属性脚本的数据值。</p><h3 id="2-场景制作">2.  场景制作</h3><p>场景分两部分，摄像机Camera和地图Map。为了方便加载，这个地图是预先摆好并保存为预制件。</p><p>​地图部分如下图，是Map空对象下放了子对象墙体地板等组成的。子对象部分有4类：Wall、InnerWall、Plane、Area，分别代表四面围墙、内部障碍墙、地板和各巡逻区域。Wall和InnerWall都是普通的Cube对象，Plane就是Plane对象，Area则是空对象挂上一个Box Collider和一个区域检测的脚本。位置摆放及数值等都是本人自己设计的，没什么好讲的。<s>(这里有扇墙是假的)</s></p><p><img src="/img/2022/Homework7/13.png" alt="13"></p><p>​然后，我们将第一步做的预制件先放在想要放的位置，记录位置数据等。因为要求用工厂模式生成巡逻兵，拾取的物体也顺便通过该模式生成了。</p><p>​摄像机是使用Main Camera，为了可以通过鼠标控制视角，并跟随玩家，挂上一个Camera Flow脚本。确定好Player的初始位置，就可以确定好摄像机的初始位置了。</p><p>到此，预制部分就全部做完了，可以开始写代码了。</p><h3 id="3-代码解析">3.  代码解析</h3><h4 id="代码框架图">代码框架图</h4><p>(本人还是不太习惯用UML图，思维导图既能帮助我整理结构，又能标记完成情况等，比较方便。)</p><p><img src="/img/2022/Homework7/Patrol.png" alt="Patrol"></p><h4 id="Models部分">Models部分</h4><p><strong>Camera Flow</strong></p><p>摄像机跟随脚本，网络上挺多这样的模板的，这里也是随便参考了一个。因为视角只希望在水平方向移动，不希望上下或者前后移动，这里的RotateAround就只是绕着跟随的目标的Y轴旋转。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CameraFlow</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject target;<br><br>    Vector3 offset;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        offset = <span class="hljs-keyword">this</span>.transform.position - target.transform.position;<br>    &#125;<br><br>    <span class="hljs-comment">// Update is called once per frame</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.transform.position = target.transform.position + offset;<br>        Rotate();<br>        Scale();<br>    &#125;<br>    <span class="hljs-comment">//缩放</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Scale</span>()</span><br>    &#123;<br>        <span class="hljs-built_in">float</span> dis = offset.magnitude;<br>        dis += Input.GetAxis(<span class="hljs-string">&quot;Mouse ScrollWheel&quot;</span>) * <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">if</span> (dis &lt; <span class="hljs-number">3</span> || dis &gt; <span class="hljs-number">20</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        offset = offset.normalized * dis;<br>    &#125;<br>    <span class="hljs-comment">//左右移动</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Rotate</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (Input.GetMouseButton(<span class="hljs-number">1</span>))<br>        &#123;<br>            Vector3 pos = <span class="hljs-keyword">this</span>.transform.position;<br>            <span class="hljs-keyword">this</span>.transform.RotateAround(target.transform.position, Vector3.up, Input.GetAxis(<span class="hljs-string">&quot;Mouse X&quot;</span>) * <span class="hljs-number">10</span>);<br>            <span class="hljs-comment">//  更新相对差值</span><br>            offset = <span class="hljs-keyword">this</span>.transform.position - target.transform.position;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Enemy Data</strong></p><p>巡逻兵属性。每个数据的含义如注释所写。在工厂模式生成的时候，初始化数值。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EnemyData</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> AreaID;                      <span class="hljs-comment">//  Enemy巡逻区域序号</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isFollow = <span class="hljs-literal">false</span>;           <span class="hljs-comment">// 是否跟随玩家</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> CurID = <span class="hljs-number">-1</span>;                  <span class="hljs-comment">//  当前玩家所在区域序号</span><br>    <span class="hljs-keyword">public</span> GameObject player;               <span class="hljs-comment">//  玩家游戏对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> kind;                        <span class="hljs-comment">//  巡逻类型 3/4/5边</span><br>    <span class="hljs-keyword">public</span> Vector3 startPos;                <span class="hljs-comment">//  Enemy初始位置   </span><br>    <span class="hljs-keyword">public</span> Vector3 lu;                      <span class="hljs-comment">//  Enemy巡逻区域左上角坐标</span><br>    <span class="hljs-keyword">public</span> Vector3 rd;                      <span class="hljs-comment">//  Enemy巡逻区域右下角坐标</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Patrol Detection</strong></p><p>巡逻检测，玩家进入范围就追捕，走出范围就停止追捕。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PatrolDetection</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter</span>(<span class="hljs-params">Collider collider</span>)</span><br>    &#123;<br>        EnemyData parent = <span class="hljs-keyword">this</span>.gameObject.transform.parent.GetComponent&lt;EnemyData&gt;();<br>    <span class="hljs-comment">//玩家进入Enemy追捕范围，开始追捕</span><br>        <span class="hljs-keyword">if</span> (collider.gameObject.tag == <span class="hljs-string">&quot;Player&quot;</span>)<br>        &#123;<br>            <span class="hljs-comment">//启动追捕模式</span><br>            parent.isFollow = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">//将追捕对象设置为玩家</span><br>            parent.player = collider.gameObject;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerExit</span>(<span class="hljs-params">Collider collider</span>)</span><br>    &#123;<br>        EnemyData parent = <span class="hljs-keyword">this</span>.gameObject.transform.parent.GetComponent&lt;EnemyData&gt;();<br>        <span class="hljs-comment">//玩家跑出Enemy追捕范围/玩家跑出Enemy管控范围，结束追捕</span><br>        <span class="hljs-keyword">if</span> (collider.gameObject.tag == <span class="hljs-string">&quot;Player&quot;</span> || parent.AreaID != parent.CurID)<br>        &#123;<br>            <span class="hljs-comment">//关闭追捕模式</span><br>            parent.isFollow = <span class="hljs-literal">false</span>;<br>            <span class="hljs-comment">//将追捕对象设置为空</span><br>            parent.player = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Other Detection</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 检测玩家与巡逻兵碰撞</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">PlayerDetection</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionEnter</span>(<span class="hljs-params">Collision other</span>)</span><br>    &#123;<br>        <span class="hljs-comment">//当玩家与巡逻兵相撞</span><br>        <span class="hljs-keyword">if</span> (other.gameObject.tag == <span class="hljs-string">&quot;Player&quot;</span>)<br>        &#123;<br>            <span class="hljs-comment">//玩家死亡</span><br>            other.gameObject.GetComponent&lt;Animator&gt;().SetBool(<span class="hljs-string">&quot;live&quot;</span>,<span class="hljs-literal">false</span>);<br>            <span class="hljs-comment">//Enemy发动攻击</span><br>            <span class="hljs-keyword">this</span>.GetComponent&lt;Animator&gt;().SetTrigger(<span class="hljs-string">&quot;attack_tri&quot;</span>);<br>            <span class="hljs-comment">//游戏结束</span><br>            Singleton&lt;GameEventManager&gt;.Instance.playerGameOver();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 检测被拾取的物体(Baby)是否被碰撞(拾取)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BabyDetection</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter</span>(<span class="hljs-params">Collider collider</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (collider.gameObject.tag == <span class="hljs-string">&quot;Player&quot;</span> &amp;&amp; <span class="hljs-keyword">this</span>.gameObject.activeSelf)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.gameObject.GetComponent&lt;Animator&gt;().SetBool(<span class="hljs-string">&quot;isFind&quot;</span>,<span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">this</span>.gameObject.GetComponent&lt;BoxCollider&gt;().enabled = <span class="hljs-literal">false</span>;<br>            Singleton&lt;GameEventManager&gt;.Instance.reduceBabyNum();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 区域标志、检测玩家进入哪个区域</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">AreaDetection</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> AreaID = <span class="hljs-number">0</span>;<br>    FirstSceneController sceneController;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        sceneController = Director.getInstance().currentSceneController <span class="hljs-keyword">as</span> FirstSceneController;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter</span>(<span class="hljs-params">Collider collider</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(collider.gameObject.tag == <span class="hljs-string">&quot;Player&quot;</span>)&#123;<br>            sceneController.CurID = AreaID;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Actions部分">Actions部分</h4><p>这里只介绍巡逻动作的脚本。</p><p><strong>Enemy Walk Action</strong></p><p>​通过在矩形画凸多边形，在多边形上任意取点。多边形取点逻辑如下图所示。橙色边为给定的巡逻大范围。<strong>三角形</strong>则在紫色、绿色及黄色三条线段依次任取点；<strong>四边形</strong>则在紫色、绿色、黄色、蓝色四条线段上依次任取点；<strong>五边形</strong>则在紫色、绿色、右侧粉色、粉色定点、上方粉色，四条线段加一个定点依次取点。忽略边界的小概率实践，形成的轨迹就是指定的凸多边形。</p><p><img src="/img/2022/Homework7/14.png" alt="14"></p><p>​也许会留意到轨迹周围有一段留白，那是为了避免巡逻兵在指定轨迹上行走，碰上障碍物原地不动的情况设置的。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EnemyWalkAction</span> : <span class="hljs-title">SSAction</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> kind = <span class="hljs-number">4</span>;                           <span class="hljs-comment">//  多边形边数</span><br>    <span class="hljs-comment">// 运动范围为(areaDown,areaUp),(areaLeft,areaRight)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> areaLeft = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> areaUp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> areaRight = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> areaDown = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> moveSpeed = <span class="hljs-number">1.8f</span>;                 <span class="hljs-comment">//  移动速度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> isReach = <span class="hljs-literal">true</span>;                    <span class="hljs-comment">//  是否到达目的地</span><br>    <span class="hljs-keyword">private</span> EnemyData enemyData;                    <span class="hljs-comment">//  Enemy数据</span><br>    <span class="hljs-keyword">private</span> List&lt;Vector3&gt; path = <span class="hljs-keyword">new</span> List&lt;Vector3&gt;();   <span class="hljs-comment">//存储路径点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> curTar = <span class="hljs-number">0</span>;     <span class="hljs-comment">//  当前目标地索引</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">EnemyWalkAction</span>()</span> &#123; &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> EnemyWalkAction <span class="hljs-title">GetSSAction</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> k, Vector3 start, Vector3 lu, Vector3 rd</span>)</span><br>    &#123;<br>        EnemyWalkAction action = CreateInstance&lt;EnemyWalkAction&gt;();<br>        action.kind = k;<br>        action.areaLeft = lu.x;<br>        action.areaRight = rd.x;<br>        action.areaUp = lu.z;<br>        action.areaDown = rd.z;<br>        action.initPath();<br>        <br>        <span class="hljs-keyword">return</span> action;<br>    &#125;<br>    <span class="hljs-function">Vector3 <span class="hljs-title">getPoint</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> left, <span class="hljs-built_in">float</span> right, <span class="hljs-built_in">float</span> down, <span class="hljs-built_in">float</span> up</span>)</span>&#123;<br>        Vector3 res= <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(left==right)&#123;    <span class="hljs-comment">//竖线</span><br>            res.x = left;<br>            res.z = Random.Range(down,up); <br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(down==up)&#123;<br>            res.x = Random.Range(left,right);<br>            res.z = down;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            res.x = Random.Range(left,right);<br>            res.z = Random.Range(down,up);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">initPath</span>()</span><br>    &#123;<br>        <span class="hljs-built_in">float</span> midx = (areaLeft+areaRight)/<span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">float</span> midz = (areaUp+areaDown)/<span class="hljs-number">2</span>;<br>        path.Add(getPoint(areaLeft+<span class="hljs-number">2f</span>,areaLeft+<span class="hljs-number">2f</span>,areaDown+<span class="hljs-number">2f</span>,areaUp<span class="hljs-number">-2f</span>));<br>        path.Add(getPoint(areaLeft+<span class="hljs-number">2f</span>,areaRight<span class="hljs-number">-2f</span>,areaDown+<span class="hljs-number">2f</span>,areaDown+<span class="hljs-number">2f</span>));<br>        <span class="hljs-comment">// 三角形</span><br>        <span class="hljs-keyword">if</span>(kind==<span class="hljs-number">3</span>)&#123;<br>            path.Add(getPoint(areaRight<span class="hljs-number">-2f</span>,areaRight<span class="hljs-number">-2f</span>,midz,areaUp<span class="hljs-number">-2f</span>));<br>        &#125;<br>        <span class="hljs-comment">// 四边形</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(kind==<span class="hljs-number">4</span>)&#123;<br>            path.Add(getPoint(areaRight<span class="hljs-number">-2f</span>,areaRight<span class="hljs-number">-2f</span>,areaDown+<span class="hljs-number">2f</span>,areaUp<span class="hljs-number">-2f</span>));<br>            path.Add(getPoint(areaLeft+<span class="hljs-number">2f</span>,areaRight<span class="hljs-number">-2f</span>,areaUp<span class="hljs-number">-2f</span>,areaUp<span class="hljs-number">-2f</span>));<br>        &#125;<br>        <span class="hljs-comment">// 五边形</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(kind==<span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-built_in">float</span> quax = (midx+areaRight)/<span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">float</span> quaz = (midz+areaUp)/<span class="hljs-number">2</span>;<br>            path.Add(getPoint(areaRight<span class="hljs-number">-2f</span>,areaRight<span class="hljs-number">-2f</span>,areaDown+<span class="hljs-number">2f</span>,midz));<br>            path.Add(<span class="hljs-keyword">new</span> Vector3(quax,<span class="hljs-number">0</span>,quaz));<br>            path.Add(getPoint(areaLeft+<span class="hljs-number">2f</span>,midx,areaUp<span class="hljs-number">-2f</span>,areaUp<span class="hljs-number">-2f</span>));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">goPatrol</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(isReach)&#123;<br>            curTar ++;<br>            curTar %= kind;<br>            isReach = <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">this</span>.transform.LookAt(path[curTar]);<br>        <span class="hljs-comment">// 只要很接近地点就相当于到了</span><br>        <span class="hljs-built_in">float</span> distance = Vector3.Distance(transform.position, path[curTar]);<br>        <span class="hljs-keyword">if</span> (distance &gt; <span class="hljs-number">0.9</span>)<br>        &#123;<br>            transform.position = Vector3.MoveTowards(<span class="hljs-keyword">this</span>.transform.position, path[curTar], moveSpeed * Time.deltaTime);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            isReach = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 巡逻移动</span><br>        goPatrol();<br>        <span class="hljs-comment">// 如果巡逻兵需要跟随玩家并且玩家就在巡逻兵所在的区域，巡逻动作停止</span><br>        <span class="hljs-keyword">if</span> (enemyData.isFollow &amp;&amp; enemyData.CurID == enemyData.AreaID)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.destroy = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">this</span>.callback.SSActionEvent(<span class="hljs-keyword">this</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">this</span>.gameObject);<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.gameObject.GetComponent&lt;Animator&gt;().SetBool(<span class="hljs-string">&quot;isWalk&quot;</span>, <span class="hljs-literal">true</span>);<br>        enemyData = <span class="hljs-keyword">this</span>.gameObject.GetComponent&lt;EnemyData&gt;();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="Controllers部分">Controllers部分</h4><p><strong>First Scene Controller</strong></p><p>简单讲一下场景控制器。实现了消息订阅，实现了用户动作接口和场景动作接口。其中，有一个需要注意的点是 Restart 使用了<code>SceneManager.LoadScene();</code>，可以加载指定场景，比较方便。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FirstSceneController</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">IUserAction</span>, <span class="hljs-title">ISceneController</span><br>&#123;<br>    <span class="hljs-keyword">public</span> PropFactory factory;                              <span class="hljs-comment">// Enemy和Baby工厂</span><br>    <span class="hljs-keyword">public</span> ScoreController scoreController;                  <span class="hljs-comment">// 记分员</span><br>    <span class="hljs-keyword">public</span> EnemyActionManager manager;                       <span class="hljs-comment">// 运动管理器</span><br>    <span class="hljs-keyword">public</span> myUserGUI userGUI;                                <span class="hljs-comment">// 用户界面</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> CurID = <span class="hljs-number">-1</span>;                                   <span class="hljs-comment">// 当前玩家所于检测区域的序号</span><br>    <span class="hljs-keyword">public</span> GameObject player;                                <span class="hljs-comment">// 玩家</span><br>    <span class="hljs-keyword">public</span> Camera cam;                                       <span class="hljs-comment">// 主相机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> moveSpeed = <span class="hljs-number">5</span>;                              <span class="hljs-comment">// 玩家移动速度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> rotateSpeed = <span class="hljs-number">250f</span>;                         <span class="hljs-comment">// 玩家旋转速度</span><br>    <span class="hljs-keyword">private</span> List&lt;GameObject&gt; enemies;                        <span class="hljs-comment">// 场景中Enemy列表</span><br>    <span class="hljs-keyword">private</span> List&lt;GameObject&gt; babies;                         <span class="hljs-comment">// 场景Baby列表</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> isGameOver = <span class="hljs-literal">false</span>;                         <span class="hljs-comment">// 游戏是否结束</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; enemies.Count; i++)<br>        &#123;<br>            enemies[i].gameObject.GetComponent&lt;EnemyData&gt;().CurID = CurID;<br>        &#125;<br>        <span class="hljs-comment">// Baby收集完毕</span><br>        <span class="hljs-keyword">if</span>(scoreController.getBabyNum() == <span class="hljs-number">0</span>)<br>        &#123;<br>            GameOver();<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        Director director = Director.getInstance();<br>        director.currentSceneController = <span class="hljs-keyword">this</span>;<br>        gameObject.AddComponent&lt;PropFactory&gt;();<br>        factory = Singleton&lt;PropFactory&gt;.Instance;<br>        manager = gameObject.AddComponent&lt;EnemyActionManager&gt;() <span class="hljs-keyword">as</span> EnemyActionManager;<br>        scoreController = gameObject.AddComponent&lt;ScoreController&gt;() <span class="hljs-keyword">as</span> ScoreController;<br>        userGUI = gameObject.AddComponent&lt;myUserGUI&gt;() <span class="hljs-keyword">as</span> myUserGUI;<br>        LoadResource();<br>        cam.GetComponent&lt;CameraFlow&gt;().target = player;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadResource</span>()</span><br>    &#123;<br>        Instantiate(Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;Prefabs/Map&quot;</span>));<br>        player = Instantiate(Resources.Load(<span class="hljs-string">&quot;Prefabs/Player&quot;</span>), <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), Quaternion.identity) <span class="hljs-keyword">as</span> GameObject;<br>        babies = factory.getBabies();<br>        enemies = factory.getEnemies();<br><br>        <span class="hljs-comment">// 所有巡逻兵移动</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; enemies.Count; i++)<br>        &#123;<br>            manager.Walk(enemies[i]);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">// 玩家移动</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">movePlayer</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> tranX, <span class="hljs-built_in">float</span> tranZ, <span class="hljs-built_in">bool</span> isShift</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(!isGameOver)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (tranX != <span class="hljs-number">0</span> || tranZ != <span class="hljs-number">0</span>)<br>            &#123;<br>                player.GetComponent&lt;Animator&gt;().SetBool(<span class="hljs-string">&quot;isWalk&quot;</span>, <span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">// 如果shift加速</span><br>                <span class="hljs-keyword">if</span> (isShift)&#123;<br>                    player.GetComponent&lt;Animator&gt;().SetBool(<span class="hljs-string">&quot;isRun&quot;</span>, <span class="hljs-literal">true</span>);<br>                    moveSpeed = <span class="hljs-number">10</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    player.GetComponent&lt;Animator&gt;().SetBool(<span class="hljs-string">&quot;isRun&quot;</span>, <span class="hljs-literal">false</span>);<br>                    moveSpeed = <span class="hljs-number">5</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                player.GetComponent&lt;Animator&gt;().SetBool(<span class="hljs-string">&quot;isWalk&quot;</span>, <span class="hljs-literal">false</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">// 移动和旋转</span><br>            player.transform.Translate(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, tranZ * moveSpeed * Time.deltaTime);<br>            player.transform.Rotate(<span class="hljs-number">0</span>, tranX * rotateSpeed * Time.deltaTime, <span class="hljs-number">0</span>);<br><br>            <span class="hljs-comment">// 防止碰撞带来的移动</span><br>            <span class="hljs-keyword">if</span> (player.transform.localEulerAngles.x != <span class="hljs-number">0</span> || player.transform.localEulerAngles.z != <span class="hljs-number">0</span>)<br>            &#123;<br>                player.transform.localEulerAngles = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>, player.transform.localEulerAngles.y, <span class="hljs-number">0</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (player.transform.position.y != <span class="hljs-number">0</span>)<br>            &#123;<br>                player.transform.position = <span class="hljs-keyword">new</span> Vector3(player.transform.position.x, <span class="hljs-number">0</span>, player.transform.position.z);<br>            &#125;     <br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getScore</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> scoreController.getScore();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getBabyNum</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> scoreController.getBabyNum();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">getGameOver</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> isGameOver;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Restart</span>()</span><br>    &#123;<br>        SceneManager.LoadScene(<span class="hljs-string">&quot;Scenes/startScene&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span><br>    &#123;<br>        GameEventManager.scoreChange += addScore;<br>        GameEventManager.gameOverChange += GameOver;<br>        GameEventManager.babyChange += reduceBabyNum;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span><br>    &#123;<br>        GameEventManager.scoreChange -= addScore;<br>        GameEventManager.gameOverChange -= GameOver;<br>        GameEventManager.babyChange -= reduceBabyNum;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">reduceBabyNum</span>()</span><br>    &#123;<br>        scoreController.reduceBaby();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addScore</span>()</span><br>    &#123;<br>        scoreController.addScore();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">GameOver</span>()</span><br>    &#123;<br>        isGameOver = <span class="hljs-literal">true</span>;<br>        factory.stopEnemies();<br>        manager.DestroyAllAction();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Others部分">Others部分</h4><p><strong>Game Event Manager</strong></p><p>订阅/发布模式（又叫观察者模式，事件-代理机制 ， 事件的代理模型）。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GameEventManager</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-comment">//  分数变化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ScoreEvent</span>()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">event</span> ScoreEvent scoreChange;<br>    <span class="hljs-comment">//  游戏结束</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GameOverEvent</span>()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">event</span> GameOverEvent gameOverChange;<br>    <span class="hljs-comment">//  Baby数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">delegate</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BabyEvent</span>()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">event</span> BabyEvent babyChange;<br><br>    <span class="hljs-comment">//  分数变化</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">playerEscape</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (scoreChange != <span class="hljs-literal">null</span>)<br>        &#123;<br>            scoreChange();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//  游戏结束</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">playerGameOver</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (gameOverChange != <span class="hljs-literal">null</span>)<br>        &#123;<br>            gameOverChange();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//  Baby数量</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reduceBabyNum</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (babyChange != <span class="hljs-literal">null</span>)<br>        &#123;<br>            babyChange();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>delegate</code>关键字定义了函数类型<code>ScoreEvent</code>、<code>GameOverEvent</code>、<code>BabyEvent</code>等的代理类型。静态变量scoreChange、gameOverChange、babyChange就是相应的“被订阅的主题”。</p><p>如下图 FirstSceneController 里的调用，+= 部分表示左边的函数一被调用，就会通知<strong>所有</strong>带有右边函数的对象要进行调用右边的函数，相当于右边订阅了左边。而 -= 就代表取消订阅了。</p><p>这里的<code>playerEscape()</code>等函数是一个接口，当调用时，就在告诉记分员要计分<code>addScore()</code>了。</p><p><img src="/img/2022/Homework7/15.png" alt="15"></p><h4 id="Views部分">Views部分</h4><p><strong>myUserGUI</strong></p><p>用户界面，也是大同小异。</p><p>这里主要是为了提到一个悬浮提示的小制作。格式如下，其中<code>tipStyle</code>为可选</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#">GUI.Button(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>), <span class="hljs-keyword">new</span> GUIContent(<span class="hljs-string">&quot;提示&quot;</span>, <span class="hljs-string">&quot;提示内容&quot;</span>));<br>GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>), GUI.tooltip[, tipStyle]);<br></code></pre></td></tr></table></figure><p>第一次知道，IMGUI里的内容可以使用 <code>\n</code> 来换行。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">myUserGUI</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">private</span> IUserAction action;<br>    <span class="hljs-keyword">private</span> GUIStyle scoreNumStyle = <span class="hljs-keyword">new</span> GUIStyle();<br>    <span class="hljs-keyword">private</span> GUIStyle scoreTextStyle = <span class="hljs-keyword">new</span> GUIStyle();<br>    <span class="hljs-keyword">private</span> GUIStyle scoreShadowStyle = <span class="hljs-keyword">new</span> GUIStyle();<br>    <span class="hljs-keyword">private</span> GUIStyle titleStyle = <span class="hljs-keyword">new</span> GUIStyle();<br>    <span class="hljs-keyword">private</span> GUIStyle shadowStyle = <span class="hljs-keyword">new</span> GUIStyle();<br>    <span class="hljs-keyword">private</span> GUIStyle tipStyle = <span class="hljs-keyword">new</span> GUIStyle();<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span> ()</span><br>    &#123;<br>        action = Director.getInstance().currentSceneController <span class="hljs-keyword">as</span> IUserAction;<br>        scoreNumStyle.normal.textColor = <span class="hljs-keyword">new</span> Color(<span class="hljs-number">1</span>,<span class="hljs-number">0.92f</span>,<span class="hljs-number">0.016f</span>,<span class="hljs-number">1</span>);<br>        scoreNumStyle.fontSize = <span class="hljs-number">30</span>;<br>        scoreTextStyle.normal.textColor = <span class="hljs-keyword">new</span> Color(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        scoreTextStyle.fontSize = <span class="hljs-number">30</span>;<br>        scoreShadowStyle.normal.textColor = <span class="hljs-keyword">new</span> Color(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0.4f</span>);<br>        scoreShadowStyle.fontSize = <span class="hljs-number">30</span>;<br>        titleStyle.normal.textColor = <span class="hljs-keyword">new</span> Color(<span class="hljs-number">0.47F</span>,<span class="hljs-number">0.4F</span>,<span class="hljs-number">0.93F</span>,<span class="hljs-number">1</span>);<br>        titleStyle.fontSize = <span class="hljs-number">40</span>;<br>        shadowStyle.normal.textColor = <span class="hljs-keyword">new</span> Color(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0.5f</span>);<br>        shadowStyle.fontSize = <span class="hljs-number">40</span>;<br>        tipStyle.normal.textColor = <span class="hljs-keyword">new</span> Color(<span class="hljs-number">0.54f</span>,<span class="hljs-number">0.27f</span>,<span class="hljs-number">0.04f</span>,<span class="hljs-number">1</span>);<br>        tipStyle.fontSize = <span class="hljs-number">18</span>;<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//获取方向键的偏移量</span><br>        <span class="hljs-built_in">float</span> tranX = Input.GetAxis(<span class="hljs-string">&quot;Horizontal&quot;</span>);<br>        <span class="hljs-built_in">float</span> tranZ = Input.GetAxis(<span class="hljs-string">&quot;Vertical&quot;</span>);<br>        <span class="hljs-built_in">bool</span> isShift = Input.GetKey(KeyCode.LeftShift);<br>        <span class="hljs-comment">//移动玩家</span><br>        action.movePlayer(tranX, tranZ, isShift);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>()</span><br>    &#123;<br>        GUI.skin.button.fontSize = <span class="hljs-number">20</span>;<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;分数:&quot;</span>, scoreTextStyle);<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;分数:&quot;</span>, scoreShadowStyle);<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">90</span>, <span class="hljs-number">5</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>), action.getScore().ToString(), scoreNumStyle);<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width - <span class="hljs-number">245</span>, <span class="hljs-number">5</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;剩余小狐狸数:&quot;</span>, scoreTextStyle);<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width - <span class="hljs-number">246</span>, <span class="hljs-number">4</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;剩余小狐狸数:&quot;</span>, scoreShadowStyle);<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width - <span class="hljs-number">50</span>, <span class="hljs-number">5</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>), action.getBabyNum().ToString(), scoreNumStyle);<br>        <span class="hljs-keyword">if</span>(action.getGameOver() &amp;&amp; action.getBabyNum() != <span class="hljs-number">0</span>)<br>        &#123;<br>            GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width / <span class="hljs-number">2</span> - <span class="hljs-number">80</span>, Screen.height / <span class="hljs-number">2</span> - <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>), <span class="hljs-string">&quot;游戏结束&quot;</span>, titleStyle);<br>            GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width / <span class="hljs-number">2</span> - <span class="hljs-number">78</span>, Screen.height / <span class="hljs-number">2</span> - <span class="hljs-number">98</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>), <span class="hljs-string">&quot;游戏结束&quot;</span>, shadowStyle);<br>            <span class="hljs-keyword">if</span> (GUI.Button(<span class="hljs-keyword">new</span> Rect(Screen.width / <span class="hljs-number">2</span> - <span class="hljs-number">50</span>, Screen.height / <span class="hljs-number">2</span> , <span class="hljs-number">100</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;重新开始&quot;</span>))<br>            &#123;<br>                action.Restart();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(action.getBabyNum() &lt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width / <span class="hljs-number">2</span> - <span class="hljs-number">80</span>, Screen.height / <span class="hljs-number">2</span> - <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>), <span class="hljs-string">&quot;恭喜胜利&quot;</span>, titleStyle);<br>            GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width / <span class="hljs-number">2</span> - <span class="hljs-number">78</span>, Screen.height / <span class="hljs-number">2</span> - <span class="hljs-number">98</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>), <span class="hljs-string">&quot;恭喜胜利&quot;</span>, shadowStyle);<br>            <span class="hljs-keyword">if</span> (GUI.Button(<span class="hljs-keyword">new</span> Rect(Screen.width / <span class="hljs-number">2</span> - <span class="hljs-number">50</span>, Screen.height / <span class="hljs-number">2</span> , <span class="hljs-number">100</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;重新开始&quot;</span>))<br>            &#123;<br>                action.Restart();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>        &#125;<br><br>        GUI.Button(<span class="hljs-keyword">new</span> Rect(Screen.width / <span class="hljs-number">2</span> - <span class="hljs-number">50</span> ,<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>), <span class="hljs-keyword">new</span> GUIContent(<span class="hljs-string">&quot;提示规则&quot;</span>, <span class="hljs-string">&quot;按WSAD或方向键移动\n按左Shift键进行加速\n成功躲避猛兽追捕加1分\n找到所有小狐狸即可获胜\n鼠标右键实现视角转动&quot;</span>));<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width / <span class="hljs-number">2</span> - <span class="hljs-number">80</span> ,<span class="hljs-number">80</span>, <span class="hljs-number">150</span>, <span class="hljs-number">120</span>), GUI.tooltip, tipStyle);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小结">小结</h3><ul><li><p>学会了动画控制器的使用；</p></li><li><p>理解了订阅/发布模式；</p></li><li><p>了解到了碰撞抖动、IMGUI的悬浮提示做法等。</p></li><li><p>Player与一个被拾取物体的碰撞按道理只会触发一次。碰撞很偶尔会出现两次的情况，没有解决这个bug。</p></li><li><p>巡逻兵没有加变速功能，且探测范围设置较小，游戏难度比较低。</p></li></ul><blockquote><p>2022.12.19Cauchy.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>animator</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HW6: 物理系统与碰撞</title>
    <link href="/2022/12/04/2022/Homework6/"/>
    <url>/2022/12/04/2022/Homework6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作业简介：</p><ol><li>打靶游戏（涉及刚体物理学、碰撞）</li></ol></blockquote><span id="more"></span><p>🐎</p><h2 id="打靶游戏">打靶游戏</h2><ul><li>靶对象为5环，按环记分；</li><li>箭对象，射中后要插在靶上；射中后，箭对象产生颤抖效果，到下一次射击或1秒以后；</li><li>游戏仅一轮，无限trials；添加一个风向和强度标志，提高难度。</li></ul><p><strong>项目地址：</strong></p><p><a href="https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw6/Assets">https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw6/Assets</a></p><p><strong>效果展示图：</strong></p><p><img src="/img/2022/Homework6/1.gif" alt="1"></p><p><strong>代码框架图：</strong></p><p><img src="/img/2022/Homework6/%E5%B0%84%E7%AE%AD%E6%B8%B8%E6%88%8F.png" alt="射箭游戏"></p><h4 id="1、预制件制作">1、预制件制作</h4><ul><li>靶子</li></ul><p>1个空对象作为父对象，包含5个圆柱体(Cylinder)。通过前后位置的摆放，可以在正面形成环状视觉效果。</p><p><img src="/img/2022/Homework6/2.png" alt="2"></p><p>空对象上只挂载刚体组件rigidbody，碰撞检测选择连续的Continus。</p><p><img src="/img/2022/Homework6/4.png" alt="4"></p><p>圆柱子对象则挂载MeshCollider，并勾选Convex和其下的Is Trigger让其有碰撞检测功能。</p><p><img src="/img/2022/Homework6/3.png" alt="3"></p><ul><li>箭</li></ul><p>1个空对象作为父对象，包含1个长方体(Cube)箭头、1个圆柱体(Cylinder)箭身、3个长方体(Cube)箭尾。</p><p><img src="/img/2022/Homework6/5.png" alt="5"></p><p>空对象同样只挂载刚体组件rigidbody，注意勾选使用重力Use Gravity及使用动力学Is Kinematic。碰撞检测选择动态连续Continuous Dynamic。</p><p><img src="/img/2022/Homework6/6.png" alt="6"></p><p>子对象只在箭头挂载碰撞器与箭头脚本。**注意：**如果箭头长度太短，又配合高速运动的话，碰撞检测很有可能会出现异常，比如一次性检测到多个或者少检测到几个。</p><p><img src="/img/2022/Homework6/7.png" alt="7"></p><p>这样，主要的预制件就做好了。这里还做了一个背景板的预制件，附带了碰撞器效果，使射出靶范围的箭能停在“墙”上。</p><h4 id="2、部分代码解析">2、部分代码解析</h4><ul><li>arrowScript</li></ul><p>箭头脚本：检测箭与靶子的碰撞。</p><p>这里利用靶子的圆柱组件Tag来识别打到哪个环，从而计分。为避免多次碰撞，加入cnt计数限制只计分一次碰撞。碰撞完成后，将箭的空对象的刚体属性更改为is Kinematic，且速度归零；箭的tag改为”Hit“，用于触发抖动运动。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">arrowScript</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> ColliderTag;<br>    <span class="hljs-keyword">private</span> ScoreController scoreController;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter</span>(<span class="hljs-params">Collider tar</span>)</span> &#123;<br>        cnt++;<br>        <span class="hljs-keyword">if</span>(cnt&gt;<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>        ColliderTag = tar.gameObject.tag;<br>        Rigidbody parent = <span class="hljs-keyword">this</span>.gameObject.transform.parent.gameObject.GetComponent&lt;Rigidbody&gt;();<br>        parent.isKinematic = <span class="hljs-literal">true</span>;<br>        parent.velocity = Vector3.zero;<br>        parent.gameObject.tag = <span class="hljs-string">&quot;Hit&quot;</span>;<br>        scoreController.Record(ColliderTag);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span>()</span>&#123;<br>        cnt = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span>&#123;<br>        scoreController = (ScoreController)FindObjectOfType(<span class="hljs-keyword">typeof</span>(ScoreController));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>CCFlyAction</li></ul><p>箭飞行运动：传入wind和force参数，来控制箭上施加的物理学的力。rot参数根据wind参数，增加自旋效果。为确保Tremble抖动运动值运行一次，这里加入了isTrem判断。只有运行完飞行运动且Tag为&quot;Hit&quot;的物体才会发生抖动。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CCFlyAction</span> : <span class="hljs-title">SSAction</span><br>&#123;<br>    <span class="hljs-keyword">public</span> Vector3 force;<br>    <span class="hljs-keyword">public</span> Vector3 wind;<br>    <span class="hljs-keyword">private</span> Vector3 rot = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> isTrem = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CCFlyAction <span class="hljs-title">GetCCFlyAction</span>(<span class="hljs-params">Vector3 _wind, Vector3 _force</span>)</span>&#123;<br>        CCFlyAction action = ScriptableObject.CreateInstance&lt;CCFlyAction&gt;();<br>        action.force = _force;<br>        action.wind = _wind;<br>        action.rot.z = _wind.x;<br>        <span class="hljs-keyword">return</span> action;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span>&#123;<br>        isTrem = <span class="hljs-literal">false</span>;<br>        gameObject.transform.LookAt(force);<br>gameObject.GetComponent&lt;Rigidbody&gt;().isKinematic = <span class="hljs-literal">false</span>;<br>gameObject.GetComponent&lt;Rigidbody&gt;().AddForce(force, ForceMode.Impulse);<br>gameObject.GetComponent&lt;Rigidbody&gt;().velocity = Vector3.zero;<br>gameObject.GetComponent&lt;Rigidbody&gt;().AddForce(force + wind, ForceMode.Impulse);<br>        gameObject.GetComponent&lt;Rigidbody&gt;().angularVelocity = rot;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.gameObject.GetComponent&lt;Rigidbody&gt;().AddForce(wind, ForceMode.Force);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.gameObject.tag == <span class="hljs-string">&quot;Hit&quot;</span> &amp;&amp; isTrem == <span class="hljs-literal">false</span>)&#123;<br>            <span class="hljs-keyword">this</span>.callback.SSActionEvent(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">this</span>.gameObject);<br>            isTrem = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (transform.position.y &lt; <span class="hljs-number">-10</span> || transform.position.z &gt; <span class="hljs-number">-6.7</span>) &#123;<br>            <span class="hljs-keyword">this</span>.destroy = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><ul><li>CCTrembleAction</li></ul><p>箭抖动运动：抖动时间为0.5秒，通过箭的轻微上下运动来模拟抖动效果。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CCTrembleAction</span> : <span class="hljs-title">SSAction</span><br>&#123;<br>    <span class="hljs-built_in">float</span> radian = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">float</span> per_radian = <span class="hljs-number">3f</span>;<br><span class="hljs-built_in">float</span> radius = <span class="hljs-number">0.01f</span>;<br>Vector3 old_pos;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> left_time = <span class="hljs-number">0.5f</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span>&#123;<br>        old_pos = transform.position;<br>    &#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CCTrembleAction <span class="hljs-title">GetSSAction</span>()</span>&#123;<br>CCTrembleAction tremble = CreateInstance&lt;CCTrembleAction&gt;();<br><span class="hljs-keyword">return</span> tremble;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span>&#123;<br>left_time -= Time.deltaTime;<br><span class="hljs-keyword">if</span> (left_time &lt;= <span class="hljs-number">0</span>)&#123;<br>transform.position = old_pos;<br><span class="hljs-keyword">this</span>.destroy = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">this</span>.callback.SSActionEvent(<span class="hljs-keyword">this</span>);<br>&#125;<br>radian += per_radian;<br><span class="hljs-built_in">float</span> dy = Mathf.Cos(radian) * radius; <br>transform.position = old_pos + <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>, dy, <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>()</span>&#123;&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>ArrowFactory</li></ul><p>箭工厂：用于生成与回收箭。这里是相当于最多生成10支箭，用完了则回收最先用的箭来用。生成箭或利用回收的箭时，记得恢复箭的初始属性。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ArrowFactory</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject arrow = <span class="hljs-literal">null</span>;<br>    List&lt;GameObject&gt; used;<br>    Queue&lt;GameObject&gt; free;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        used = <span class="hljs-keyword">new</span> List&lt;GameObject&gt;();<br>        free = <span class="hljs-keyword">new</span> Queue&lt;GameObject&gt;();<br>        <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> GameObject <span class="hljs-title">GetArrow</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>(free.Count == <span class="hljs-number">0</span>)&#123;<br>            arrow = Instantiate(Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;Prefabs/arrow&quot;</span>));<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            arrow = free.Dequeue();<br>            arrow.gameObject.SetActive(<span class="hljs-literal">true</span>);<br>            arrow.gameObject.tag = <span class="hljs-string">&quot;Untagged&quot;</span>;<br>            arrow.gameObject.transform.Find(<span class="hljs-string">&quot;head&quot;</span>).gameObject.SetActive(<span class="hljs-literal">true</span>);<br>            arrow.gameObject.transform.Find(<span class="hljs-string">&quot;body&quot;</span>).gameObject.SetActive(<span class="hljs-literal">true</span>);<br>            arrow.gameObject.transform.Find(<span class="hljs-string">&quot;head&quot;</span>).GetComponent&lt;arrowScript&gt;().reset();<br>        &#125;<br>        arrow.transform.position = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>, <span class="hljs-number">2.5f</span>, <span class="hljs-number">-12.5F</span>);<br>        used.Add(arrow);<br>        <span class="hljs-keyword">return</span> arrow; <br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FreeArrow</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>(used.Count&lt;=<span class="hljs-number">10</span>)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;used.Count; i++)&#123;<br>            <span class="hljs-keyword">if</span>(used[i].gameObject.transform.position.y &lt;= <span class="hljs-number">-10</span> || used[i].gameObject.transform.position.z &gt;= <span class="hljs-number">-5</span> || used[i].gameObject.tag == <span class="hljs-string">&quot;Hit&quot;</span>)&#123;<br>                used[i].GetComponent&lt;Rigidbody&gt;().isKinematic = <span class="hljs-literal">true</span>;<br>                used[i].gameObject.SetActive(<span class="hljs-literal">false</span>);<br>                used[i].transform.position =  <span class="hljs-keyword">new</span> Vector3 (<span class="hljs-number">0</span>, <span class="hljs-number">2.5f</span>, <span class="hljs-number">-12.5f</span>);<br>                free.Enqueue(used[i]);<br>                used.Remove(used[i]);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>RoundController</li></ul><p>场景控制器：加载资源（靶子、墙体等），生成风，移动箭等的功能实现。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RoundController</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">ISceneController</span>, <span class="hljs-title">IUserAction</span><br>&#123;<br>    ArrowFactory factory;<br>    <span class="hljs-keyword">public</span> CCActionManager actionManager;<br>    <span class="hljs-keyword">public</span> ScoreController scoreController;<br>    <span class="hljs-keyword">public</span> myUserGUI userGUI;<br><br>    <span class="hljs-keyword">public</span> GameObject target;<br>    <span class="hljs-keyword">public</span> GameObject arrow;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isStart = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> windTag = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> wind_directX;     <br><span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> wind_directY; <br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;   <br>        Director director = Director.getInstance();<br>        director.currentSceneController = <span class="hljs-keyword">this</span>;<br>        gameObject.AddComponent&lt;ArrowFactory&gt;();<br>        factory = Singleton&lt;ArrowFactory&gt;.Instance;<br>        actionManager = gameObject.AddComponent&lt;CCActionManager&gt;() <span class="hljs-keyword">as</span> CCActionManager;<br>        scoreController = gameObject.AddComponent&lt;ScoreController&gt;() <span class="hljs-keyword">as</span> ScoreController;<br>        userGUI = gameObject.AddComponent&lt;myUserGUI&gt;() <span class="hljs-keyword">as</span> myUserGUI;<br>        LoadResource();<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadResource</span>()</span><br>    &#123;<br>        target = GameObject.Instantiate&lt;GameObject&gt;(Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;Prefabs/target&quot;</span>));<br>        GameObject.Instantiate&lt;GameObject&gt;(Resources.Load&lt;GameObject&gt;(<span class="hljs-string">&quot;Prefabs/wall&quot;</span>));<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(isStart) &#123;<br>            factory.FreeArrow();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Init</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>(arrow == <span class="hljs-literal">null</span>)&#123;<br>            wind_directX = Random.Range(<span class="hljs-number">-4</span>, <span class="hljs-number">4</span>);<br>wind_directY = Random.Range(<span class="hljs-number">-4</span>, <span class="hljs-number">4</span>);<br>            CreateWind();<br>            arrow = factory.GetArrow();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveBow</span>(<span class="hljs-params">Vector3 mousePos</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!isStart)<br>            <span class="hljs-keyword">return</span>;<br>        arrow.transform.LookAt(mousePos * <span class="hljs-number">30</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shootArrow</span>(<span class="hljs-params">Vector3 force</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(isStart)<br>&#123;<br>Vector3 wind = <span class="hljs-keyword">new</span> Vector3(wind_directX, wind_directY, <span class="hljs-number">0</span>);<br>actionManager.MoveArrow(arrow, wind, force * <span class="hljs-number">10</span>);<br>arrow = <span class="hljs-literal">null</span>;<br>&#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">GetStart</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> isStart;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">GetWind</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> windTag;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Begin</span>()</span><br>    &#123;<br>        isStart = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">GetScore</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> scoreController.score;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CreateWind</span>()</span>&#123;<br>        <span class="hljs-built_in">string</span> Horizontal = <span class="hljs-string">&quot;&quot;</span>, Vertical = <span class="hljs-string">&quot;&quot;</span>, level = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (wind_directX &gt; <span class="hljs-number">0</span>) &#123;<br>            Horizontal = <span class="hljs-string">&quot;西&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (wind_directX &lt;= <span class="hljs-number">0</span>) &#123;<br>            Horizontal = <span class="hljs-string">&quot;东&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (wind_directY &gt; <span class="hljs-number">0</span>) &#123;<br>            Vertical = <span class="hljs-string">&quot;南&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (wind_directY &lt;= <span class="hljs-number">0</span>) &#123;<br>            Vertical = <span class="hljs-string">&quot;北&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((wind_directX + wind_directY) / <span class="hljs-number">2</span> &gt; <span class="hljs-number">-1</span> &amp;&amp; (wind_directX + wind_directY) / <span class="hljs-number">2</span> &lt; <span class="hljs-number">1</span>)<br>&#123;<br>level = <span class="hljs-string">&quot;1 级&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((wind_directX + wind_directY) / <span class="hljs-number">2</span> &gt; <span class="hljs-number">-2</span> &amp;&amp; (wind_directX + wind_directY) / <span class="hljs-number">2</span> &lt; <span class="hljs-number">2</span>)<br>&#123;<br>level = <span class="hljs-string">&quot;2 级&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((wind_directX + wind_directY) / <span class="hljs-number">2</span> &gt; <span class="hljs-number">-3</span> &amp;&amp; (wind_directX + wind_directY) / <span class="hljs-number">2</span> &lt; <span class="hljs-number">3</span>)<br>&#123;<br>level = <span class="hljs-string">&quot;3 级&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((wind_directX + wind_directY) / <span class="hljs-number">2</span> &gt; <span class="hljs-number">-5</span> &amp;&amp; (wind_directX + wind_directY) / <span class="hljs-number">2</span> &lt; <span class="hljs-number">5</span>)<br>&#123;<br>level = <span class="hljs-string">&quot;4 级&quot;</span>;<br>&#125;<br>        windTag = Horizontal + Vertical + <span class="hljs-string">&quot;风&quot;</span> + <span class="hljs-string">&quot; &quot;</span> + level;<br>    <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">isArrowNull</span>()</span>&#123;<br>        <span class="hljs-keyword">return</span> (arrow != <span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>ScoreController</li></ul><p>计分器：利用靶子上带有碰撞器的物体的tag来计分。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ScoreController</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> score;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span>&#123;<br>        score = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Record</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> ColliderTag</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(ColliderTag == <span class="hljs-string">&quot;10&quot;</span>)&#123;<br>            score+=<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ColliderTag == <span class="hljs-string">&quot;8&quot;</span>)&#123;<br>            score+=<span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ColliderTag == <span class="hljs-string">&quot;6&quot;</span>)&#123;<br>            score+=<span class="hljs-number">6</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ColliderTag == <span class="hljs-string">&quot;4&quot;</span>)&#123;<br>            score+=<span class="hljs-number">4</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ColliderTag == <span class="hljs-string">&quot;2&quot;</span>)&#123;<br>            score+=<span class="hljs-number">2</span>;<br>        &#125;<br>                <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Reset</span>()</span>&#123;<br>        score = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="3、小结">3、小结</h4><ul><li>要区分物理学与运动学，Rigidbody与isKinematic等的使用。</li><li>要区分各种碰撞检测模式，Discrete、Continus、Continus Dynamic等，有性能上的差异。</li><li>碰撞异常要思考：物体是否启用碰撞器、碰撞检测模式是否正确、物体运动是否过于高速、物体碰撞器体积是否过小等。</li><li>熟悉Rigidbody的一些属性与使用，方便实现物理运动效果。</li></ul><blockquote><p>Cauchy        2022.12.04</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>rigidbody</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HW5: 与游戏世界交互</title>
    <link href="/2022/11/13/2022/Homework5/"/>
    <url>/2022/11/13/2022/Homework5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作业简介：</p><p>1.自定义组件：涉及SciptableObject</p><p>2.编程实践（Hit UFO）：涉及工厂模式</p></blockquote><span id="more"></span><p>💎</p><h3 id="一、自定义组件">一、自定义组件</h3><ul><li>用自定义组件定义几种飞碟，做成预制</li></ul><p>这里借用资源商店的Sets - Gems里的prefab（都是宝石呀）作为飞碟原型。</p><p>先利用 ScriptableObject 设定飞碟的属性</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#">[<span class="hljs-meta">System.Serializable</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Attributes</span>&#123;<br>    [<span class="hljs-meta">Tooltip(<span class="hljs-string">&quot;大小&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> size;<br>    [<span class="hljs-meta">Tooltip(<span class="hljs-string">&quot;速度&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> speed;<br>    [<span class="hljs-meta">Tooltip(<span class="hljs-string">&quot;得分&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> score;<br>&#125;<br><br>[<span class="hljs-meta">CreateAssetMenu(fileName = <span class="hljs-string">&quot;DiskItem&quot;</span>, menuName = <span class="hljs-string">&quot;(ScritableObject)DiskItem&quot;</span>)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DiskItem</span> : <span class="hljs-title">ScriptableObject</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Desc;<br>    [<span class="hljs-meta">Tooltip(<span class="hljs-string">&quot;飞碟属性&quot;</span>)</span>]<br>    <span class="hljs-keyword">public</span> Attributes attributes;<br>&#125;<br></code></pre></td></tr></table></figure><p>分数与对应的属性如下表所示:</p><table><thead><tr><th>分数</th><th>大小</th><th>速度</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>15</td></tr><tr><td>2</td><td>1</td><td>17</td></tr><tr><td>5</td><td>1</td><td>20</td></tr><tr><td>9</td><td>1</td><td>35</td></tr></tbody></table><p>形状颜色与之匹配的分数规则如下图所示：</p><p><img src="/img/2022/Homework5/01.png" alt="01"></p><p>再利用Monobehavior脚本为各飞碟附上相应属性</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> DiskItem diskItem;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，我们自定义的预制件就做好了。</p><p>👾</p><h3 id="二、编程实践">二、编程实践</h3><p>项目地址：<a href="https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw5/Assets">https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw5/Assets</a></p><ul><li>编写一个简单的鼠标打飞碟游戏<ul><li>游戏有多个round，每个round包括数次trial；</li><li>每个trial的飞碟属性（色彩、大小、发射位置、速度、角度）及同时出现的个数都可能不同；</li><li>每个trial的飞碟有随机性，总体难度随round上升；</li><li>鼠标点中得分，得分规则按飞碟属性不同计算，规则可自定义。</li></ul></li><li>要求：<ul><li>使用带缓存的工厂模式管理不同飞碟的生产与回收，该工厂必须是场景单实例的！具体实现可参考资源Singleton模板类；</li><li>尽可能使用前面MVC结构实现人机交互与游戏模型分离。</li></ul></li></ul><h4 id="简单工厂">简单工厂</h4><p>简单工厂又称为工厂方法，即类一个方法能够得到一个对象实例，使用者不需要知道该实例如何构建、初始化等细节。</p><ul><li>游戏对象的创建与销毁高成本，必须减少销毁次数。</li><li>屏蔽创建与销毁的业务逻辑，是程序易于扩展。</li></ul><p>在Unity中，<strong>工厂方法+单实例+对象池</strong> 通常都是同时一起用。这里给出一个设计例子：</p><p><img src="/img/2022/Homework5/02.png" alt="02"></p><p>其中：</p><ul><li>DiskFactory 类是一个单实例类，用钱买场景单实例创建</li><li>DiskFactory 类有工厂方法 GetDisk 产生飞碟，有回收方法 FreeDisk</li><li>DiskFactory 使用模板模式根据预制和规则制作飞碟</li><li>对象模板包括飞碟对象与飞碟数据</li></ul><h4 id="实现效果">实现效果</h4><p><img src="/img/2022/Homework5/04.gif" alt="04"></p><h4 id="代码框架">代码框架</h4><p><img src="/img/2022/Homework5/03.png" alt="03"></p><p>其中标注了<strong>固定模板</strong>的类是基本与前几次作业使用的代码一致，除了<code>Singleton</code>是本次作业新增的。</p><p><code>Singleton</code>代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span>&lt;<span class="hljs-title">T</span>&gt; : <span class="hljs-title">MonoBehaviour</span> <span class="hljs-keyword">where</span> <span class="hljs-title">T</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> T instance;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T Instance&#123;<br>        <span class="hljs-keyword">get</span>&#123;<br>            <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>                instance = (T)FindObjectOfType(<span class="hljs-keyword">typeof</span>(T));<br>                <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>                    Debug.LogError(<br>                        <span class="hljs-string">&quot;An instance of &quot;</span>+<br>                        <span class="hljs-keyword">typeof</span>(T)+<br>                        <span class="hljs-string">&quot; is needed in the scene, but there is none.&quot;</span><br>                    );<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="主要代码">主要代码</h4><p><strong>CCFlyAction</strong></p><p>用于飞行动作。通过改变游戏对象position的z轴来实现其移动，也加入了游戏对象自己旋转。当z轴坐标不大于-20时，理解为飞出屏幕，销毁处理。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CCFlyAction</span> : <span class="hljs-title">SSAction</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CCFlyAction <span class="hljs-title">GetCCFlyAction</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> s</span>)</span>&#123;<br>        CCFlyAction action = ScriptableObject.CreateInstance&lt;CCFlyAction&gt;();<br>        action.speed = s;<br>        <span class="hljs-keyword">return</span> action;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//飞碟已经被&quot;销毁&quot;</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.transform.gameObject.activeSelf == <span class="hljs-literal">false</span>) &#123; <br>            Debug.Log(<span class="hljs-string">&quot;Hit Destroy&quot;</span>);<br>            <span class="hljs-keyword">this</span>.destroy = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">this</span>.callback.SSActionEvent(<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.transform.position.z &lt;= <span class="hljs-number">-20</span>)&#123;<br>            Debug.Log(<span class="hljs-string">&quot;Out Destroy&quot;</span>);<br>            <span class="hljs-keyword">this</span>.destroy = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">this</span>.callback.SSActionEvent(<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        transform.position -= <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, speed * Time.deltaTime);<br>        transform.Rotate(<span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>, <span class="hljs-number">10</span> * Time.deltaTime, <span class="hljs-number">30</span> * Time.deltaTime));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>CCActionManager</strong></p><p>用于管理飞行动作。<strong>注</strong>：其中这里的<code>Update()</code>不需要实现，则不要<code>new</code>，否则不能进入基类已编写好的<code>Update()</code>函数。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CCActionManager</span> : <span class="hljs-title">SSActionManager</span>, <span class="hljs-title">ISSActionCallback</span> <br>&#123;<br>    <span class="hljs-keyword">public</span> RoundController sceneController;<br>    <span class="hljs-keyword">public</span> CCFlyAction action;<br>    <span class="hljs-keyword">public</span> DiskFactory factory;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        sceneController = (RoundController)Director.getInstance().currentSceneController;<br>        sceneController.actionManager = <span class="hljs-keyword">this</span>;<br>        factory = Singleton&lt;DiskFactory&gt;.Instance;<br>    &#125;<br><br>    <span class="hljs-comment">// protected new void Update()&#123;&#125;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SSActionEvent</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">        SSAction source,</span></span><br><span class="hljs-params"><span class="hljs-function">        SSActionEventType events = SSActionEventType.Completed,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-built_in">int</span> intParam = <span class="hljs-number">0</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-built_in">string</span> strParam = <span class="hljs-literal">null</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        Object objectParam = <span class="hljs-literal">null</span></span>)</span> &#123;<br>            factory.freeDisk(source.transform.gameObject);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MoveDisk</span>(<span class="hljs-params">GameObject disk</span>)</span> &#123;<br>        action = CCFlyAction.GetCCFlyAction((<span class="hljs-built_in">float</span>)disk.GetComponent&lt;Test&gt;().diskItem.attributes.speed);<br>        RunAction(disk, action, <span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>IUserAction &amp; ISceneController</strong></p><p>用户动作及场景动作的接口。两者共用一个<code>getHit()</code>来检测用户点击场景的游戏对象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IUserAction</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gameOver</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getHit</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Restart</span>()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ISceneController</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LoadResource</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getHit</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>DiskFactory</strong></p><p>飞碟工厂。used用于存储创造出来的飞碟，free用于要销毁的飞碟。由于飞碟对象使用我们前面制作的预制件，所以只需要使用及对不同round做一些处理即可。</p><p>对于第一轮，只会出现1分与2分的飞碟；第二轮只会出现1分、2分与5分的飞碟；第三轮往后会出现所有种类的飞碟。要注意飞碟加分与扣分的区别。飞碟的出生位置，随轮数增加而中心向外扩。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> : <span class="hljs-title">System.Exception</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span>()</span>&#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyException</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>) : <span class="hljs-title">base</span>(<span class="hljs-params">message</span>)</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">DiskFactory</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    List&lt;GameObject&gt; used;<br>    List&lt;GameObject&gt; free;<br>    System.Random rand;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        used = <span class="hljs-keyword">new</span> List&lt;GameObject&gt;();<br>        free = <span class="hljs-keyword">new</span> List&lt;GameObject&gt;();<br>        rand = <span class="hljs-keyword">new</span> System.Random();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getDiskName</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> seed</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Bomb1a&quot;</span>;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Bomb1b&quot;</span>;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Bomb1c&quot;</span>;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Disk1a&quot;</span>;    <br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Disk1b&quot;</span>;    <br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">6</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Disk1c&quot;</span>;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">7</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Disk2a&quot;</span>;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">8</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Disk2b&quot;</span>;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">9</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Bomb5a&quot;</span>;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">10</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Disk5a&quot;</span>;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">11</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Bomb5b&quot;</span>;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">12</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Disk5b&quot;</span>;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">13</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Bomb9&quot;</span>;<br>        <span class="hljs-keyword">if</span>(seed == <span class="hljs-number">14</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Prefabs/Disk9&quot;</span>;               <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> GameObject <span class="hljs-title">createDisk</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> round</span>)</span>&#123;<br>        GameObject disk;<br>        <span class="hljs-built_in">int</span> right=<span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">if</span>(round == <span class="hljs-number">1</span>)<br>            right = <span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(round == <span class="hljs-number">2</span>)<br>            right = <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">else</span><br>            right = <span class="hljs-number">14</span>;<br>            <br>        <span class="hljs-keyword">if</span>(free.Count != <span class="hljs-number">0</span>)&#123;<br>            disk = free[<span class="hljs-number">0</span>];<br>            free.Remove(disk);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">string</span> getName = getDiskName(rand.Next(<span class="hljs-number">1</span>,right+<span class="hljs-number">1</span>));<br>            disk = GameObject.Instantiate(Resources.Load(getName, <span class="hljs-keyword">typeof</span>(GameObject))) <span class="hljs-keyword">as</span> GameObject;<br>        &#125;<br>        <span class="hljs-built_in">int</span> roundX = round*<span class="hljs-number">10</span>;<br>        <span class="hljs-built_in">int</span> roundY = round*<span class="hljs-number">6</span>;<br>        <span class="hljs-built_in">int</span> roundZ = <span class="hljs-number">100</span>+round*<span class="hljs-number">20</span>;<br>        disk.transform.position = <span class="hljs-keyword">new</span> Vector3(rand.Next(-roundX,roundX+<span class="hljs-number">1</span>), rand.Next(-roundY,roundY+<span class="hljs-number">1</span>), rand.Next(<span class="hljs-number">80</span>,roundZ));<br><br>        <span class="hljs-built_in">int</span> scale = disk.GetComponent&lt;Test&gt;().diskItem.attributes.size;<br>        disk.transform.localScale = <span class="hljs-keyword">new</span> Vector3(scale, scale, scale);<br>        <br>        used.Add(disk);<br>        disk.SetActive(<span class="hljs-literal">true</span>);<br>        Debug.Log(<span class="hljs-string">&quot;Generate disk success&quot;</span>);<br>        <span class="hljs-keyword">return</span> disk; <br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">freeDisk</span>(<span class="hljs-params">GameObject disk</span>)</span>&#123;<br>        disk.SetActive(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">if</span> (!used.Contains(disk)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> MyException(<span class="hljs-string">&quot;Try to remove a item from a list which doesn&#x27;t contain it.&quot;</span>);<br>        &#125;<br>        Debug.Log(<span class="hljs-string">&quot;Free disk success&quot;</span>);<br>        used.Remove(disk);<br>        free.Add(disk);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>RoundController</strong></p><p>局数控制器。相当于之前的FirstController。实现了用户行为与场景行为的接口。实现了每局产生飞碟的函数。每个round会有4次发射，每次发射6个飞碟，发射间隔会根据round增加而减小。利用射线碰撞检测鼠标点击飞碟。<strong>注</strong>：预制件中的飞碟必须要加入collider碰撞器。否则无法检测射线碰撞。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">RoundController</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">ISceneController</span>, <span class="hljs-title">IUserAction</span><br>&#123;<br>    <span class="hljs-built_in">int</span> round = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">int</span> currDisk = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> max_round = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">float</span> timer = <span class="hljs-number">1.0f</span>;<br>    GameObject disk;<br>    DiskFactory factory;<br>    <span class="hljs-keyword">public</span> CCActionManager actionManager;<br>    <span class="hljs-keyword">public</span> ScoreController scoreController;<br>    <span class="hljs-keyword">public</span> myUserGUI userGUI;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;   <br>        Director director = Director.getInstance();<br>        director.currentSceneController = <span class="hljs-keyword">this</span>;<br>        director.currentSceneController.LoadResource();<br>        gameObject.AddComponent&lt;DiskFactory&gt;();<br>        factory = Singleton&lt;DiskFactory&gt;.Instance;<br>        actionManager = gameObject.AddComponent&lt;CCActionManager&gt;() <span class="hljs-keyword">as</span> CCActionManager;<br>        scoreController = gameObject.AddComponent&lt;ScoreController&gt;() <span class="hljs-keyword">as</span> ScoreController;<br>        userGUI = gameObject.AddComponent&lt;myUserGUI&gt;() <span class="hljs-keyword">as</span> myUserGUI;<br><br>    &#125;<br>    <span class="hljs-comment">// No need to loadresource</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadResource</span>()</span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(userGUI.mode == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span>;<br>        getHit();<br>        gameOver();<br>        <span class="hljs-keyword">if</span>(round&gt;max_round)<br>            <span class="hljs-keyword">return</span>;<br>        timer -= Time.deltaTime;<br>        <span class="hljs-keyword">if</span>(timer&lt;=<span class="hljs-number">0</span> )&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">6</span>;i++)&#123;<br>                disk = factory.createDisk(round);<br>                actionManager.MoveDisk(disk);<br>            &#125;<br>            currDisk+=<span class="hljs-number">6</span>;<br>            <span class="hljs-keyword">if</span>(round&lt;=max_round)<br>                userGUI.round = round;<br>            timer = (<span class="hljs-built_in">float</span>)(<span class="hljs-number">4</span>-round*<span class="hljs-number">0.5</span>);<br>            <span class="hljs-keyword">if</span>(currDisk%<span class="hljs-number">24</span> == <span class="hljs-number">0</span>)&#123;<br>                round++;<br>                timer = <span class="hljs-number">10.0F</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">gameOver</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (round &gt; max_round &amp;&amp; actionManager.RemainActionCount() == <span class="hljs-number">0</span>)<br>            userGUI.gameMessage = <span class="hljs-string">&quot;Game Over!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getHit</span>()</span><br>    &#123;<br>        <span class="hljs-comment">// 按钮设置 名为“Fire1”监听鼠标点击</span><br>        <span class="hljs-keyword">if</span> (Input.GetButtonDown(<span class="hljs-string">&quot;Fire1&quot;</span>)) &#123;<br>            Debug.Log(<span class="hljs-string">&quot;Fire pressed&quot;</span>);<br>Camera ca = Camera.main;<br>Ray ray = ca.ScreenPointToRay(Input.mousePosition);<br><br>RaycastHit hit;<br><span class="hljs-keyword">if</span> (Physics.Raycast(ray, <span class="hljs-keyword">out</span> hit)) &#123;<br>                Debug.Log(hit.transform.gameObject.name);<br>                scoreController.Record(hit.transform.gameObject);<br>                hit.transform.gameObject.SetActive(<span class="hljs-literal">false</span>);<br>&#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Restart</span>()</span>&#123;<br>        round = <span class="hljs-number">1</span>;<br>        currDisk = <span class="hljs-number">0</span>;<br>        timer = <span class="hljs-number">1.0F</span>;<br>        scoreController.Reset();<br>        userGUI.Reset();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ScoreController</strong></p><p>分数控制器。用于简单的计分功能。由于预制件中扣分的飞碟的score属性已经为负，此处的<code>Record</code>函数的score直接加就可以了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">ScoreController</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> score;<br>    <span class="hljs-keyword">public</span> RoundController roundController;<br>    <span class="hljs-keyword">public</span> myUserGUI userGUI;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        roundController = (RoundController)Director.getInstance().currentSceneController;<br>        roundController.scoreController = <span class="hljs-keyword">this</span>;<br>        userGUI = <span class="hljs-keyword">this</span>.gameObject.GetComponent&lt;myUserGUI&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Record</span>(<span class="hljs-params">GameObject disk</span>)</span>&#123;<br>        score += disk.GetComponent&lt;Test&gt;().diskItem.attributes.score;<br>        userGUI.score = score;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Reset</span>()</span>&#123;<br>        score = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>myUserGUI</strong></p><p>用户界面。分为主界面<code>mainMenu</code>和游玩界面<code>gameStart</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">myUserGUI</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> mode;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> score;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> round;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> gameMessage;<br>    <span class="hljs-keyword">private</span> IUserAction action;<br>    <span class="hljs-keyword">public</span> GUIStyle titleStyle, textStyle;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> menu_w = Screen.width/<span class="hljs-number">5</span>, menu_h = Screen.height/<span class="hljs-number">5</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        mode = <span class="hljs-number">0</span>;<br>        gameMessage = <span class="hljs-string">&quot;&quot;</span>;<br>        action = Director.getInstance().currentSceneController <span class="hljs-keyword">as</span> IUserAction;<br>    <br>        titleStyle = <span class="hljs-keyword">new</span> GUIStyle();<br>        titleStyle.normal.textColor = Color.white;<br>        titleStyle.normal.background = <span class="hljs-literal">null</span>;<br>        titleStyle.fontSize = <span class="hljs-number">50</span>;<br>        titleStyle.alignment = TextAnchor.MiddleCenter;<br><br>        textStyle = <span class="hljs-keyword">new</span> GUIStyle();<br>        textStyle.normal.textColor = Color.white;<br>        textStyle.normal.background = <span class="hljs-literal">null</span>;<br>        textStyle.fontSize = <span class="hljs-number">20</span>;<br>        textStyle.alignment = TextAnchor.MiddleCenter;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>()</span><br>    &#123;<br>        GUI.skin.button.fontSize = <span class="hljs-number">35</span>;<br>        <span class="hljs-keyword">switch</span>(mode)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                mainMenu();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                gameStart();<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mainMenu</span>()</span><br>    &#123;<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width / <span class="hljs-number">2</span> - menu_w * <span class="hljs-number">0.5f</span>, Screen.height * <span class="hljs-number">0.1f</span>, menu_w, menu_h), <span class="hljs-string">&quot;Hit UFO&quot;</span>, titleStyle);<br>        <span class="hljs-built_in">bool</span> button = GUI.Button(<span class="hljs-keyword">new</span> Rect(Screen.width / <span class="hljs-number">2</span> - menu_w * <span class="hljs-number">0.5f</span>, Screen.height * <span class="hljs-number">3</span> / <span class="hljs-number">7</span>, menu_w, menu_h), <span class="hljs-string">&quot;Start&quot;</span>);<br>        <span class="hljs-keyword">if</span> (button) &#123;<br>            mode = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gameStart</span>()</span><br>    &#123;<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width/<span class="hljs-number">2</span><span class="hljs-number">-100</span>, Screen.height/<span class="hljs-number">2</span><span class="hljs-number">-60</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>), gameMessage, titleStyle);<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;Score: &quot;</span> + score, textStyle);<br>        GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width<span class="hljs-number">-100</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;Round: &quot;</span> + round, textStyle);<br>        <span class="hljs-keyword">if</span> (gameMessage == <span class="hljs-string">&quot;Game Over!&quot;</span>) &#123;<br><span class="hljs-keyword">if</span> (GUI.Button(<span class="hljs-keyword">new</span> Rect(Screen.width/<span class="hljs-number">2</span><span class="hljs-number">-100</span>, Screen.height/<span class="hljs-number">2</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;Restart&quot;</span>)) &#123;<br>action.Restart ();<br>&#125;<br>&#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Reset</span>()</span><br>    &#123;<br>        score = <span class="hljs-number">0</span>;<br>        round = <span class="hljs-number">1</span>;<br>        mode = <span class="hljs-number">0</span>;<br>        gameMessage = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2022.11.13Cauchy</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>singleton</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HW4: 游戏对象与图形基础</title>
    <link href="/2022/11/05/2022/Homework4/"/>
    <url>/2022/11/05/2022/Homework4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作业简介：</p><p>1.基本操作演练（游戏场景）</p><p>2.编程实践</p></blockquote><span id="more"></span><p>🥘</p><h3 id="一、基本操作演练">一、基本操作演练</h3><ul><li>下载Fantasy Skybox FREE，构建自己的游戏场景（含天空、光源、音效、地形）</li></ul><p><img src="/img/2022/Homework4/scene.jpg" alt="scene"></p><ul><li>写一个简单的总结，总结游戏对象的使用</li></ul><p>目前学习到的一些游戏对象包括：3D Object里的基本物体和Terrain、Light、Camera、Skybox、Audio。每个GameObject都有Transform属性来设置位置旋转大小等。</p><ul><li><p>基本物体（Cube、Sphere之类的）：单纯的物体，通过添加材质更改外观，添加各种组件实现功能。</p></li><li><p>Terrain：地面，通过Terrain自带的编辑工具可以编辑地形，如更改地形大小，修改地形高度，给地形“上色”，还可以添加树木花草等。我们更多地会选择使用别人做好现成的素材。</p><p><img src="/img/2022/Homework4/terrain1.jpg" alt="terrain1"></p><p><img src="/img/2022/Homework4/terrain2.jpg" alt="terrain2"></p></li><li><p>Light：灯光。光影的合理设置能更好地表达3D环境的颜色与情绪。有平行光、聚光灯、点光源、区域光等，不同光有不同属性面板。</p><p>如点光源这个面板，我们能看到像颜色、阴影等设置。</p><p><img src="/img/2022/Homework4/Light.jpg" alt="Light"></p></li><li><p>Camera：摄影机。第一人称游戏可以作为玩家的眼睛，第三人称游戏可以跟随玩家运动。多摄像机是制造效果的重要手段。摄像机属性面板如下：</p><p><img src="/img/2022/Homework4/Camera.jpg" alt="Camera"></p><p>各属性说明可参考官方文档：<a href="https://docs.unity.cn/cn/2021.3/Manual/class-Camera.html">https://docs.unity.cn/cn/2021.3/Manual/class-Camera.html</a></p></li><li><p>Skybox：天空盒（一种材料）。根据shader着色器的类型不同，需要配置不同的天空盒素材。如Skybox/Cubemap是一个圆形图片、Mobile/Skybox是6面图片、Skybox/Panoramic是一张全景图。制作好天空盒材质后，可以放到Camera的Skybox部件中。</p><p><img src="/img/2022/Homework4/skybox.jpg" alt="skybox"></p><p><img src="/img/2022/Homework4/skybox2.jpg" alt="skybox2"></p></li><li><p>Audio：音源。可利用Audio Source在场景中播放声音，利用附着在角色对象上的Audio Listener监听场景中的声音。Audio Source可以设置为3D，听起来有立体的效果。通过混响等技巧可以产生更复杂的效果。</p><p><img src="/img/2022/Homework4/audio.jpg" alt="audio"></p></li></ul><p>🍜</p><h3 id="二、编程实践">二、编程实践</h3><p>牧师与魔鬼 动作分离版+设计一个裁判类（当游戏到达结束条件时，通知场景控制器游戏结束）</p><p>项目地址：<a href="https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw4/Assets/Scripts">https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw4/Assets/Scripts</a></p><p>对比上一个版本的一些区别：</p><ul><li>将动作抽离出来形成一个动作管理器</li><li>增加了裁判类通知游戏结束</li><li>增加了计时器功能</li><li>游戏结束会在船靠岸之后才提示弹出来</li></ul><p>实际效果如下图：</p><p><img src="/img/2022/Homework4/anime.gif" alt="anime"></p><h4 id="1-动作管理器的设计">1 动作管理器的设计</h4><p><img src="/img/2022/Homework4/uml.jpg" alt="uml"></p><ul><li>通过门面模式（控制器模式）输出组合好的几个动作，供原来程序调用。</li><li>通过组合模式实现动作组合，按组合模式设计方法</li><li>接口回调（函数回调）实现管理者与被管理者解耦</li><li>通过模板方法，让使用者减少对动作管理过程细节的要求</li><li>优点：<ul><li>程序更能适应需求变化</li><li>对象更容易被复用</li><li>程序更易于维护</li></ul></li></ul><p><strong>1.动作基类(SSAction)</strong></p><ul><li>SSAction是动作的基类，其他动作类都继承于它。</li><li>ScriptableObject是不需要绑定GameObject对象的可编程基类。这些对象受Unity引擎场景管理。</li><li>protected 防止用户自己new抽象的对象</li><li>使用virtual申明虚方法，通过重写实现多态。</li><li>利用接口(ISSActionCallback)实现消息通知，避免与动作管理者直接依赖</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SSAction</span> : <span class="hljs-title">ScriptableObject</span> <br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> enable = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> destroy = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> GameObject gameObject &#123;<span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>;&#125;<br>    <span class="hljs-keyword">public</span> Transform transform &#123;<span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>;&#125;<br>    <span class="hljs-keyword">public</span> ISSActionCallback callback &#123;<span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-title">SSAction</span>()</span>&#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> System.NotImplementedException();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> System.NotImplementedException();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.动作管理基类(SSActionManager)</strong></p><ul><li>该类实现所有动作的基本管理，CCActionManager会继承于它。</li><li>利用一个动作字典来进行动作的运行，先将waitingAdd中的动作加入字典中，运行动作后，再将它加入到waitingDelete中销毁。由于字典是线程不安全的，如果控制好队列，如每次最多存在一个动作，就不会导致动作的混乱。</li><li>提供了添加新动作的方法RunAction。该方法把游戏对象与动作绑定，并绑定该动作事件的消息接受者。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SSActionManager</span> : <span class="hljs-title">MonoBehaviour</span> &#123;<br>    <span class="hljs-comment">//动作集，以字典形式存在</span><br>    <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">int</span>, SSAction&gt; actions = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">int</span>, SSAction&gt;();<br>    <span class="hljs-comment">//等待被加入的动作队列(动作即将开始)</span><br>    <span class="hljs-keyword">private</span> List&lt;SSAction&gt; waitingAdd = <span class="hljs-keyword">new</span> List&lt;SSAction&gt;();<br>    <span class="hljs-comment">//等待被删除的动作队列(动作已完成)</span><br>    <span class="hljs-keyword">private</span> List&lt;<span class="hljs-built_in">int</span>&gt; waitingDelete = <span class="hljs-keyword">new</span> List&lt;<span class="hljs-built_in">int</span>&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//将waitingAdd中的动作保存</span><br>        <span class="hljs-keyword">foreach</span> (SSAction ac <span class="hljs-keyword">in</span> waitingAdd)<br>            actions[ac.GetInstanceID()] = ac;<br>        waitingAdd.Clear();<br><br>        <span class="hljs-comment">//运行被保存的事件</span><br>        <span class="hljs-keyword">foreach</span> (KeyValuePair&lt;<span class="hljs-built_in">int</span>, SSAction&gt; kv <span class="hljs-keyword">in</span> actions)<br>        &#123;<br>            SSAction ac = kv.Value;<br>            <span class="hljs-keyword">if</span> (ac.destroy)<br>            &#123;<br>                waitingDelete.Add(ac.GetInstanceID());<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ac.enable)<br>            &#123;<br>                ac.Update();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//销毁waitingDelete中的动作</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-built_in">int</span> key <span class="hljs-keyword">in</span> waitingDelete)<br>        &#123;<br>            SSAction ac = actions[key];<br>            actions.Remove(key);<br>            Destroy(ac);<br>        &#125;<br>        waitingDelete.Clear();<br>    &#125;<br><br>    <span class="hljs-comment">//准备运行一个动作，将动作初始化，并加入到waitingAdd</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">RunAction</span>(<span class="hljs-params">GameObject gameObject, SSAction action, ISSActionCallback manager</span>)</span><br>    &#123;<br>        action.gameObject = gameObject;<br>        action.transform = gameObject.transform;<br>        action.callback = manager;<br>        waitingAdd.Add(action);<br>        action.Start();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.动作事件接口定义(ISSActionCallback)</strong></p><ul><li>接口作为接收通知对象的抽象类型，所有事件管理者都必须实现该接口，来实现事件调度。</li><li>事件类型定义，使用了<strong>枚举变量</strong>。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> SSActionEventType:<span class="hljs-built_in">int</span> &#123;Started, Completed&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ISSActionCallback</span><br>&#123;<br>    <span class="hljs-comment">//回调函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SSActionEvent</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">        SSAction source,</span></span><br><span class="hljs-params"><span class="hljs-function">        SSActionEventType events = SSActionEventType.Completed,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-built_in">int</span> intParam = <span class="hljs-number">0</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-built_in">string</span> strParam = <span class="hljs-literal">null</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        Object objectParam = <span class="hljs-literal">null</span></span></span><br><span class="hljs-params"><span class="hljs-function">    </span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4.简单动作实现(CCMoveToAction)</strong></p><ul><li>实现移动动作，将物体移动到目标位置，并通知任务完成。</li><li>让Unity创建动作类，确保内存正确回收。</li><li>override 多态，c++必须申明重写，java则默认重写。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CCMoveToAction</span> : <span class="hljs-title">SSAction</span><br>&#123;<br>    <br>    <span class="hljs-keyword">public</span> Vector3 target; <span class="hljs-comment">//目的地</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> speed; <span class="hljs-comment">//速度</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">CCMoveToAction</span>()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//生产函数(工厂模式)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CCMoveToAction <span class="hljs-title">GetSSAction</span>(<span class="hljs-params">Vector3 target, <span class="hljs-built_in">float</span> speed</span>)</span><br>    &#123;<br>        CCMoveToAction action = ScriptableObject.CreateInstance&lt;CCMoveToAction&gt;();<br>        action.target = target;<br>        action.speed = speed;<br>        <span class="hljs-keyword">return</span> action;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span>&#123;&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//判断是否符合移动条件</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.gameObject == <span class="hljs-literal">null</span> || <span class="hljs-keyword">this</span>.transform.position == target)<br>        &#123;<br><br>            <span class="hljs-keyword">this</span>.destroy = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">this</span>.callback.SSActionEvent(<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//移动</span><br>        <span class="hljs-keyword">this</span>.transform.position = Vector3.MoveTowards(<span class="hljs-keyword">this</span>.transform.position, target, speed * Time.deltaTime);<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.顺序动作组合类实现(CCSequenceAction)</strong></p><ul><li>实现一个动作组合序列，顺序播放动作。</li><li>让动作组合继承抽象动作SSAction，能够进一步组合；实现回调接收，能接受被组合动作的事件。</li><li>创建一个动作顺序执行序列，-1表示无限循环，start开始动作。</li><li>SSActionEvent 收到当前动作执行完成，推下一个动作，如果完成一次循环，减次数。如完成，通知该动作的管理者。</li><li>Start 执行动作前，为每个动作注入当前动作游戏对象，并将自己作为动作事件的接收者。</li><li>OnDestroy 如果自己被注销，应该释放自己管理的动作。这里不会被注销，因此没有实现该功能。</li><li>这是标准的组合设计模式。被组合对象和组合对象同属一种类型。通过该模式，我们能实现几乎满足所有越位需要、非常复杂的动作管理。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CCSequenceAction</span> : <span class="hljs-title">SSAction</span>, <span class="hljs-title">ISSActionCallback</span><br>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;SSAction&gt; sequence; <span class="hljs-comment">//动作序列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> repeat = <span class="hljs-number">-1</span>; <span class="hljs-comment">//重复次数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> start = <span class="hljs-number">0</span>; <span class="hljs-comment">//动作开始指针</span><br><br>    <span class="hljs-comment">//生产函数(工厂模式)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CCSequenceAction <span class="hljs-title">GetSSAction</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> repeat, <span class="hljs-built_in">int</span> start, List&lt;SSAction&gt; sequence</span>)</span><br>    &#123;<br>        CCSequenceAction action = ScriptableObject.CreateInstance&lt;CCSequenceAction&gt;();<br>        action.repeat = repeat;<br>        action.sequence = sequence;<br>        action.start = start;<br>        <span class="hljs-keyword">return</span> action;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">foreach</span> (SSAction action <span class="hljs-keyword">in</span> sequence)<br>        &#123;<br>            action.gameObject = <span class="hljs-keyword">this</span>.gameObject;<br>            action.transform = <span class="hljs-keyword">this</span>.transform;<br>            action.callback = <span class="hljs-keyword">this</span>;<br>            action.Start();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (sequence.Count == <span class="hljs-number">0</span>)    <br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (start &lt; sequence.Count)<br>            sequence[start].Update();<br>    &#125;<br><br>    <span class="hljs-comment">//回调处理，当有动作完成时触发</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SSActionEvent</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">        SSAction source,</span></span><br><span class="hljs-params"><span class="hljs-function">        SSActionEventType events = SSActionEventType.Completed,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-built_in">int</span> Param = <span class="hljs-number">0</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-built_in">string</span> strParam = <span class="hljs-literal">null</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">        Object objectParam = <span class="hljs-literal">null</span></span>)</span><br>    &#123;<br>        source.destroy = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">this</span>.start++;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.start &gt;= sequence.Count)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.start = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (repeat &gt; <span class="hljs-number">0</span>)<br>                repeat--;<br>            <span class="hljs-keyword">if</span> (repeat == <span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">this</span>.destroy = <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">this</span>.callback.SSActionEvent(<span class="hljs-keyword">this</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDestroy</span>()</span><br>    &#123;<br>        <span class="hljs-comment">//<span class="hljs-doctag">TODO:</span> Something</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6.动作组合管理(CCActionManager)</strong></p><p>上一版本的moveable脚本拆分到这个类和FirstController的方法中，实现船和角色的移动管理。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// 将原来移动的方法 放在这里</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CCActionManager</span> : <span class="hljs-title">SSActionManager</span>, <span class="hljs-title">ISSActionCallback</span><br>&#123;<br>    <span class="hljs-comment">//是否正在运动</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">bool</span> isMoving = <span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//船移动动作类</span><br>    <span class="hljs-keyword">public</span> CCMoveToAction moveBoatAction;<br>    <span class="hljs-comment">//人移动动作类(需要组合)</span><br>    <span class="hljs-keyword">public</span> CCSequenceAction moveRoleAction;<br>    <span class="hljs-comment">//控制器</span><br>    <span class="hljs-keyword">public</span> FirstController controller;<br><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        controller = (FirstController)Director.getInstance().currentSceneController;<br>        controller.actionManager = <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">IsMoving</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> isMoving;<br>    &#125;<br><br>    <span class="hljs-comment">//移动船</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MoveBoat</span>(<span class="hljs-params">GameObject boat, Vector3 target, <span class="hljs-built_in">float</span> speed</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (isMoving)<br>            <span class="hljs-keyword">return</span>;<br>        isMoving = <span class="hljs-literal">true</span>;<br>        moveBoatAction = CCMoveToAction.GetSSAction(target, speed);<br>        <span class="hljs-keyword">this</span>.RunAction(boat, moveBoatAction, <span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//移动人</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">MoveRole</span>(<span class="hljs-params">GameObject role, Vector3 mid_destination, Vector3 destination, <span class="hljs-built_in">int</span> speed</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (isMoving)<br>            <span class="hljs-keyword">return</span>;<br>        isMoving = <span class="hljs-literal">true</span>;<br>        moveRoleAction = CCSequenceAction.GetSSAction(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">new</span> List&lt;SSAction&gt; <br>            &#123;   CCMoveToAction.GetSSAction(mid_destination, speed), <br>                CCMoveToAction.GetSSAction(destination, speed) &#125;);<br>        <span class="hljs-keyword">this</span>.RunAction(role, moveRoleAction, <span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//回调函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SSActionEvent</span>(<span class="hljs-params">SSAction source,</span></span><br><span class="hljs-params"><span class="hljs-function">    SSActionEventType events = SSActionEventType.Completed,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-built_in">int</span> intParam = <span class="hljs-number">0</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-built_in">string</span> strParam = <span class="hljs-literal">null</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    Object objectParam = <span class="hljs-literal">null</span></span>)</span><br>    &#123;<br>        isMoving = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-部分控制类的设计">2 部分控制类的设计</h4><p><strong>1.最高层控制器(FirstController)</strong></p><ul><li>这里仅展示有增改的函数方法，增添了一个裁判反馈信息<code>JudgeCallback</code>，实现裁判类的回调函数。</li><li>将原有检测游戏状态的check函数抽离给裁判类JudgeController处理。</li><li>处理了原有可移动脚本moveable的一些部分，利于与动作管理器结合。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FirstController</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">ISceneController</span>, <span class="hljs-title">IUserAction</span><br>&#123;<br>    <span class="hljs-keyword">readonly</span> Vector3 waterPos = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>,<span class="hljs-number">0.5F</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">public</span> CCActionManager actionManager;<br>    <span class="hljs-keyword">public</span> JudgeController judgeController;<br>    <span class="hljs-keyword">public</span> CoastController startCoast;<br>    <span class="hljs-keyword">public</span> CoastController endCoast;<br>    <span class="hljs-keyword">public</span> BoatController boat;<br>    <span class="hljs-keyword">private</span> myCharacterController[] characters;<br>    myUserGUI userGUI;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> isRunning;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> time;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">JudgeCallback</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> _isRunning, <span class="hljs-built_in">string</span> message</span>)</span><br>    &#123;<br>        userGUI.gameMessage = message;<br>        userGUI.time = (<span class="hljs-built_in">int</span>)time;<br>        <span class="hljs-keyword">this</span>.isRunning = _isRunning;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span> ()</span><br>    &#123;<br>        Director director = Director.getInstance();<br>        director.currentSceneController = <span class="hljs-keyword">this</span>;<br>        userGUI = gameObject.AddComponent&lt;myUserGUI&gt;() <span class="hljs-keyword">as</span> myUserGUI;<br>        actionManager = gameObject.AddComponent&lt;CCActionManager&gt;() <span class="hljs-keyword">as</span> CCActionManager;<br>        judgeController = gameObject.AddComponent&lt;JudgeController&gt;() <span class="hljs-keyword">as</span> JudgeController;<br>        characters = <span class="hljs-keyword">new</span> myCharacterController[<span class="hljs-number">6</span>];<br>        isRunning = <span class="hljs-literal">true</span>;<br>        time = <span class="hljs-number">60</span>;<br>        LoadResources();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveBoat</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isRunning == <span class="hljs-literal">false</span> || actionManager.IsMoving())<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(boat.isEmpty())<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-built_in">string</span> direct = boat.getDirection();<br>        Vector3 destination = boat.getPosition();        <br>        <span class="hljs-keyword">if</span> (direct == <span class="hljs-string">&quot;End&quot;</span>) &#123;<br>boat.setDirection(<span class="hljs-string">&quot;Start&quot;</span>);<br>&#125; <br><span class="hljs-keyword">else</span> &#123;<br>boat.setDirection(<span class="hljs-string">&quot;End&quot;</span>);<br>&#125;<br>        actionManager.MoveBoat(boat.getGameobj(), destination, <span class="hljs-number">20</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ClickCharacter</span>(<span class="hljs-params">myCharacterController cC</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(isRunning == <span class="hljs-literal">false</span> || actionManager.IsMoving())<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(cC.isOnBoat())&#123;<br>            CoastController coast;<br>            <span class="hljs-keyword">if</span>(boat.getDirection()==<span class="hljs-string">&quot;Start&quot;</span>)<br>                coast = startCoast;<br>            <span class="hljs-keyword">else</span><br>                coast = endCoast;<br><br>            boat.getOffBoat(cC.getName());<br>            Vector3 destination = coast.getEmptyPosition();<br>            Vector3 middle = destination;<br>            <span class="hljs-keyword">if</span> (destination.y &lt; cC.GetGameObject().transform.position.y) &#123;<br>    middle.y = cC.GetGameObject().transform.position.y;<br>    &#125; <br>    <span class="hljs-keyword">else</span> &#123;<br>    middle.x = cC.GetGameObject().transform.position.x;<br>    &#125;<br>            <span class="hljs-comment">// cC.moveTo(coast.getEmptyPosition());</span><br>            actionManager.MoveRole(cC.GetGameObject(), middle, destination, <span class="hljs-number">20</span>);<br>            cC.getOnCoast(coast);<br>            coast.getOnCoast(cC);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            CoastController coast = cC.getCoastController();<br>            <span class="hljs-keyword">if</span>(boat.getEmptyIndex () == <span class="hljs-number">-1</span> || coast.getDirection() != boat.getDirection())<br>                <span class="hljs-keyword">return</span>;<br>            coast.getOffCoast(cC.getName());<br>            Vector3 destination = boat.getEmptyPosition();<br>            Vector3 middle = destination;<br>            <span class="hljs-keyword">if</span> (destination.y &lt; cC.GetGameObject().transform.position.y) &#123;<br>    middle.y = cC.GetGameObject().transform.position.y;<br>    &#125; <br>    <span class="hljs-keyword">else</span> &#123;<br>    middle.x = cC.GetGameObject().transform.position.x;<br>    &#125;<br>            actionManager.MoveRole(cC.GetGameObject(), middle, destination, <span class="hljs-number">20</span>);<br>            <span class="hljs-comment">// cC.moveTo(boat.getEmptyPosition());</span><br>            cC.getOnBoat(boat);<br>            boat.getOnBoat(cC);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Restart</span>()</span>&#123;<br>        <span class="hljs-comment">//boat 移动归位</span><br>        <span class="hljs-keyword">if</span>(boat.getDirection()==<span class="hljs-string">&quot;End&quot;</span>)&#123;<br>            Vector3 destination = boat.getPosition();<br>            actionManager.MoveBoat(boat.getGameobj(), destination, <span class="hljs-number">20</span>);<br>        &#125;<br>        boat.reset();<br>        startCoast.reset();<br>        endCoast.reset();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;characters.Length;i++)<br>            characters[i].reset();<br>        isRunning = <span class="hljs-literal">true</span>;<br>        time = <span class="hljs-number">60</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.裁判类(JudgeController)</strong></p><p>实现原有FristController的check函数功能，检测游戏状态，在游戏结束时用过回调信息通知FirstController。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">JudgeController</span> : <span class="hljs-title">MonoBehaviour</span> &#123;<br>    <span class="hljs-keyword">public</span> FirstController mainController;<br>    <span class="hljs-keyword">public</span> CoastController startCoast;<br>    <span class="hljs-keyword">public</span> CoastController endCoast;<br>    <span class="hljs-keyword">public</span> BoatController boat;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.mainController = (FirstController)Director.getInstance().currentSceneController;<br>        <span class="hljs-keyword">this</span>.startCoast = mainController.startCoast;<br>        <span class="hljs-keyword">this</span>.endCoast = mainController.endCoast;<br>        <span class="hljs-keyword">this</span>.boat = mainController.boat;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (!mainController.isRunning)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(!boat.isStop())<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (mainController.time &lt;= <span class="hljs-number">0</span>)<br>        &#123;<br>            mainController.JudgeCallback(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;Game Over!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <br>        <span class="hljs-keyword">this</span>.gameObject.GetComponent&lt;myUserGUI&gt;().gameMessage = <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-built_in">int</span> startPriest = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> endPriest = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> startDevil = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> endDevil = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-built_in">int</span>[] startCount = startCoast.getNum();<br>        startPriest += startCount[<span class="hljs-number">0</span>];<br>        startDevil += startCount[<span class="hljs-number">1</span>];<br><br>        <span class="hljs-built_in">int</span>[] endCount = endCoast.getNum();<br>        endPriest += endCount[<span class="hljs-number">0</span>];<br>        endDevil += endCount[<span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">if</span>(endDevil+endPriest ==<span class="hljs-number">6</span>)&#123;<br>            mainController.JudgeCallback(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;You Win!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">int</span>[] boatCount = boat.getNum();<br>        <span class="hljs-keyword">if</span>(boat.getDirection() == <span class="hljs-string">&quot;End&quot;</span>)&#123;<br>            endPriest += boatCount[<span class="hljs-number">0</span>];<br>            endDevil += boatCount[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            startPriest += boatCount[<span class="hljs-number">0</span>];<br>            startDevil += boatCount[<span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(startPriest&lt;startDevil &amp;&amp; startPriest&gt;<span class="hljs-number">0</span>)&#123;<br>            mainController.JudgeCallback(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;Game Over!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(endPriest&lt;endDevil &amp;&amp; endPriest&gt;<span class="hljs-number">0</span>)&#123;<br>            mainController.JudgeCallback(<span class="hljs-literal">false</span>, <span class="hljs-string">&quot;Game Over!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Cauchy        2022.11.05</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HW3: 空间与运动</title>
    <link href="/2022/10/23/2022/Homework3/"/>
    <url>/2022/10/23/2022/Homework3/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作业简介：<br>1.简答题（涉及游戏对象运动）<br>2.编程实践</p><p>ps. GIF图片加载比较慢</p></blockquote><span id="more"></span><p>🦉</p><h3 id="一、简答题">一、简答题</h3><ul><li><p>游戏对象运动的本质是什么？</p><p>游戏对象随着每一帧而发生的空间位置（相对的或绝对的）、旋转角度及缩放的变化。</p></li><li><p>用三种以上方法实现物体的抛物线运动。</p><p>抛物线运动的实质是一个方向匀速运动，与其垂直的一个方向进行匀加速运动。</p><p>效果图：</p><p><img src="/img/2022/Homework3/parabola.gif" alt="parabola"></p><ul><li><p>法一：对transform.position分方向加变化值</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(frame&lt;=<span class="hljs-number">60</span>)&#123;  <span class="hljs-comment">//运行60帧</span><br>            <span class="hljs-comment">//向下的方向 匀变速 </span><br>            <span class="hljs-keyword">this</span>.transform.position += Vector3.down * Time.deltaTime * v;<br>            <span class="hljs-comment">//向左的方向 匀速</span><br>            <span class="hljs-keyword">this</span>.transform.position += Vector3.left * Time.deltaTime * <span class="hljs-number">2f</span>;<br>            <br>            <span class="hljs-keyword">this</span>.transform.Rotate(<span class="hljs-number">0f</span>,<span class="hljs-number">0f</span>,<span class="hljs-number">1f</span>,Space.Self); <span class="hljs-comment">//每帧旋转 1°</span><br>            v+=<span class="hljs-number">0.1f</span>; <span class="hljs-comment">//加速度为0.1</span><br>            frame++;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>法二：对transform.position整体方向加变化值</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(frame&lt;=<span class="hljs-number">60</span>)&#123;  <span class="hljs-comment">//运行60帧      </span><br>        <span class="hljs-comment">// 注意正负区分方向</span><br>            Vector3 change = <span class="hljs-keyword">new</span> Vector3(-Time.deltaTime*<span class="hljs-number">2f</span>, -Time.deltaTime *v, <span class="hljs-number">0f</span>);<br>            <span class="hljs-keyword">this</span>.transform.position += change;<br>            <br>            <span class="hljs-keyword">this</span>.transform.Rotate(<span class="hljs-number">0f</span>,<span class="hljs-number">0f</span>,<span class="hljs-number">1f</span>,Space.Self); <span class="hljs-comment">//每帧旋转 1°</span><br>            v+=<span class="hljs-number">0.1f</span>;<br>            frame++;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>法三：对transform.position应用transform.Translate函数</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(frame&lt;=<span class="hljs-number">60</span>)&#123;  <span class="hljs-comment">//运行60帧</span><br>            Vector3 change = <span class="hljs-keyword">new</span> Vector3(-Time.deltaTime*<span class="hljs-number">2f</span>, -Time.deltaTime *v, <span class="hljs-number">0f</span>);<br>            <span class="hljs-keyword">this</span>.transform.Translate(change,Space.World);<br><br><span class="hljs-comment">// transform.Translate默认是相对于变换的本地轴(Space.Self)来应用该移动</span><br><span class="hljs-comment">// 坐标变换有所区别，不是很好分辨方向</span><br>            <span class="hljs-comment">// Vector3 change = new Vector3(-Time.deltaTime *v,Time.deltaTime*2f,0f);</span><br>            <span class="hljs-comment">// this.transform.Translate(change);</span><br><br>            <span class="hljs-keyword">this</span>.transform.Rotate(<span class="hljs-number">0f</span>,<span class="hljs-number">0f</span>,<span class="hljs-number">1f</span>,Space.Self); <span class="hljs-comment">//每帧旋转 1°</span><br>            v+=<span class="hljs-number">0.1f</span>;<br>            frame++;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>写一个程序，实现完整的太阳系，其他星球围绕太阳的转速必须不一样，且不在一个法平面上。</p><p>这里的实现方式是写了个脚本，将围绕太阳旋转的星球都加入这个脚本，然后手动设置不同星球的自传和公转的速度。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">using</span> System.Collections;<br><span class="hljs-keyword">using</span> System.Collections.Generic;<br><span class="hljs-keyword">using</span> UnityEngine;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">planetAround</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">public</span> GameObject target;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> selfround = <span class="hljs-number">1f</span>; <span class="hljs-comment">//自转速度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">float</span> pubaround = <span class="hljs-number">1f</span>; <span class="hljs-comment">//公转速度</span><br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">this</span>.transform.Rotate(Vector3.up * Time.deltaTime *selfround);<br>        <span class="hljs-keyword">this</span>.transform.RotateAround(target.transform.position, Vector3.up, <span class="hljs-number">5</span> * pubaround * Time.deltaTime);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>实际效果：</p><p><img src="/img/2022/Homework3/solar.gif" alt=""></p></li></ul><p>🍭</p><h3 id="二、编程实践">二、编程实践</h3><p><img src="/img/2022/Homework3/hw.jpg" alt=""></p><p>试玩游戏界面</p><p><img src="/img/2022/Homework3/1.jpg" alt=""></p><p><strong>游戏规则：</strong></p><ul><li>游戏开始时，在河岸的一边有3个牧师与3个魔鬼，他们都想过到河的另一边。</li><li>只有一艘小船，小船每次最多乘两个人，且必须有一个人船才能动。</li><li>玩家可以点击牧师或魔鬼让他们上下船，点击船来使船在两岸往返。</li><li>如果在某一河岸牧师的数量少于魔鬼的数量（包括停在岸边船上人的数量），牧师被杀死，游戏失败。</li><li>使牧师与魔鬼都到达对岸时，游戏胜利。</li></ul><h4 id="Object">Object</h4><table><thead><tr><th>Object</th><th>Num</th></tr></thead><tbody><tr><td>河岸(Coast)</td><td>2</td></tr><tr><td>河水(Water)</td><td>1</td></tr><tr><td>船(Boat)</td><td>1</td></tr><tr><td>牧师(Priest)</td><td>3</td></tr><tr><td>恶魔(Devil)</td><td>3</td></tr></tbody></table><h4 id="UserAction">UserAction</h4><table><thead><tr><th>Action</th><th>Condition</th><th>Effect</th></tr></thead><tbody><tr><td>点击岸上角色</td><td>船在相应的河岸，船上人数少于2人</td><td>角色上船</td></tr><tr><td>点击船上角色</td><td>无</td><td>角色上岸</td></tr><tr><td>点击船</td><td>船上有至少一个角色</td><td>船移动到另一岸</td></tr><tr><td>点击Restart</td><td>游戏结束</td><td>重新开始游戏</td></tr></tbody></table><h4 id="Prefabs">Prefabs</h4><p>涉及的材质与部分预制来源于Assest Store。</p><p>河岸(Coast)</p><p><img src="/img/2022/Homework3/Coast.jpg" alt=""></p><p>河水(Water)</p><p><img src="/img/2022/Homework3/Water.jpg" alt=""></p><p>船(Boat)</p><p><img src="/img/2022/Homework3/Boat.jpg" alt=""></p><p>牧师(Priest)</p><p><img src="/img/2022/Homework3/Priest.jpg" alt=""></p><p>恶魔(Devil)</p><p><img src="/img/2022/Homework3/Devil.jpg" alt=""></p><h4 id="MVC框架">MVC框架</h4><p><img src="/img/2022/Homework3/Map.jpg" alt="Map"></p><h4 id="主要代码">主要代码</h4><p>项目地址：<a href="https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw3/Assets">https://github.com/Cauchyoooo/3DGameDesign/tree/main/hw3/Assets</a></p><h5 id="Director">Director</h5><p>采用单例模式，在运行时才创建Director实例，若已创建该实例不会重复创建。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Director</span> : <span class="hljs-title">System.Object</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Director _instance;<br><br>    <span class="hljs-keyword">public</span> ISceneController currentSceneController &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Director <span class="hljs-title">getInstance</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(_instance == <span class="hljs-literal">null</span>)&#123;<br>            _instance = <span class="hljs-keyword">new</span> Director();<br>        &#125;<br>        <span class="hljs-keyword">return</span> _instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="ISceneController">ISceneController</h5><p>场记接口，用于加载场景资源。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ISceneController</span><br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">LoadResources</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="IUserAction">IUserAction</h5><p>用户操作接口，用于记录可能的用户操作。这里将上述的4个行为转化为以下3个。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">IUserAction</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ClickCharacter</span>(<span class="hljs-params">myCharacterController charactorController</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">moveBoat</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Restart</span>()</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Moveable">Moveable</h5><p>可移动脚本，具有该组件的游戏对象才可以移动。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Moveable</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">float</span> moveSpeed = <span class="hljs-number">20</span>;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 0-&gt;not moving 1-&gt;moving to middle 2-&gt;moving to destination</span><br>    <span class="hljs-built_in">int</span> moveStatus;<br>    Vector3 destination;<br>    Vector3 middle;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span> &#123;<br><span class="hljs-keyword">if</span> (moveStatus == <span class="hljs-number">1</span>) &#123;<br>transform.position = Vector3.MoveTowards (transform.position, middle, moveSpeed * Time.deltaTime);<br><span class="hljs-keyword">if</span> (transform.position == middle) &#123;<br>moveStatus = <span class="hljs-number">2</span>;<br>&#125;<br>&#125; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (moveStatus == <span class="hljs-number">2</span>) &#123;<br>transform.position = Vector3.MoveTowards (transform.position, destination, moveSpeed * Time.deltaTime);<br><span class="hljs-keyword">if</span> (transform.position == destination) &#123;<br>moveStatus = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDestination</span>(<span class="hljs-params">Vector3 d</span>)</span> &#123;<br>destination = d;<br>middle = d;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> Moving Boat</span><br><span class="hljs-keyword">if</span> (d.y == transform.position.y) &#123;<br>moveStatus = <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> Move character from coast to boat</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (d.y &lt; transform.position.y) &#123;<br>middle.y = transform.position.y;<br>&#125; <br><span class="hljs-comment"><span class="hljs-doctag">///</span> Move character from boat to coast</span><br><span class="hljs-keyword">else</span> &#123;<br>middle.x = transform.position.x;<br>&#125;<br>moveStatus = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span>()</span> &#123;<br>moveStatus = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="CoastController">CoastController</h5><p>河岸控制器，用于创建河岸及涉及河岸的各种操作</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">CoastController</span> <br>&#123;<br><span class="hljs-keyword">readonly</span> GameObject coast;<br><span class="hljs-keyword">readonly</span> Vector3 startPos = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">readonly</span> Vector3 endPos = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">-9</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><span class="hljs-keyword">readonly</span> Vector3[] positions;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> direction : Start or End</span><br><span class="hljs-keyword">readonly</span> <span class="hljs-built_in">string</span> direction;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> change frequently</span><br>myCharacterController[] passengerPlaner;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CoastController</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> direc</span>)</span> &#123;<br>positions = <span class="hljs-keyword">new</span> Vector3[] &#123;<span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">6.5F</span>,<span class="hljs-number">2.0F</span>,<span class="hljs-number">0</span>), <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">7.5F</span>,<span class="hljs-number">2.0F</span>,<span class="hljs-number">0</span>), <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">8.5F</span>,<span class="hljs-number">2.0F</span>,<span class="hljs-number">0</span>), <br><span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">9.5F</span>,<span class="hljs-number">2.0F</span>,<span class="hljs-number">0</span>), <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">10.5F</span>,<span class="hljs-number">2.0F</span>,<span class="hljs-number">0</span>), <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">11.5F</span>,<span class="hljs-number">2.0F</span>,<span class="hljs-number">0</span>)&#125;;<br><br>passengerPlaner = <span class="hljs-keyword">new</span> myCharacterController[<span class="hljs-number">6</span>];<br><br><span class="hljs-keyword">if</span> (direc == <span class="hljs-string">&quot;Start&quot;</span>) &#123;<br>coast = Object.Instantiate (Resources.Load (<span class="hljs-string">&quot;Prefabs/Coast&quot;</span>, <span class="hljs-keyword">typeof</span>(GameObject)), startPos, Quaternion.identity, <span class="hljs-literal">null</span>) <span class="hljs-keyword">as</span> GameObject;<br>coast.name = <span class="hljs-string">&quot;Start&quot;</span>;<br>            coast.tag = <span class="hljs-string">&quot;Start&quot;</span>;<br>direction = <span class="hljs-string">&quot;Start&quot;</span>;<br>&#125; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(direc == <span class="hljs-string">&quot;End&quot;</span>)&#123;<br>coast = Object.Instantiate (Resources.Load (<span class="hljs-string">&quot;Prefabs/Coast&quot;</span>, <span class="hljs-keyword">typeof</span>(GameObject)), endPos, Quaternion.identity, <span class="hljs-literal">null</span>) <span class="hljs-keyword">as</span> GameObject;<br>coast.name = <span class="hljs-string">&quot;End&quot;</span>;<br>            coast.tag = <span class="hljs-string">&quot;End&quot;</span>;<br>direction = <span class="hljs-string">&quot;End&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getEmptyIndex</span>()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; passengerPlaner.Length; i++) &#123;<br><span class="hljs-keyword">if</span> (passengerPlaner [i] == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Vector3 <span class="hljs-title">getEmptyPosition</span>()</span> &#123;<br>Vector3 pos = positions [getEmptyIndex ()];<br>        <span class="hljs-keyword">if</span>(direction == <span class="hljs-string">&quot;End&quot;</span>)<br>            pos.x *= <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> pos;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getOnCoast</span>(<span class="hljs-params">myCharacterController cC</span>)</span> &#123;<br><span class="hljs-built_in">int</span> index = getEmptyIndex ();<br>passengerPlaner [index] = cC;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> myCharacterController <span class="hljs-title">getOffCoast</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> passengerName</span>)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; passengerPlaner.Length; i++) &#123;<br><span class="hljs-keyword">if</span> (passengerPlaner [i] != <span class="hljs-literal">null</span> &amp;&amp; passengerPlaner [i].getName () == passengerName) &#123;<br>myCharacterController cC = passengerPlaner [i];<br>passengerPlaner [i] = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">return</span> cC;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getDirection</span>()</span> &#123;<br><span class="hljs-keyword">return</span> direction;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>[] <span class="hljs-title">getNum</span>()</span> &#123;<br><span class="hljs-built_in">int</span>[] count = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; passengerPlaner.Length; i++) &#123;<br><span class="hljs-keyword">if</span> (passengerPlaner [i] == <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> 0-&gt;priest, 1-&gt;devil</span><br><span class="hljs-keyword">if</span> (passengerPlaner [i].getType () == <span class="hljs-number">0</span>) &#123;<br>count[<span class="hljs-number">0</span>]++;<br>&#125; <br>            <span class="hljs-keyword">else</span> &#123;<br>count[<span class="hljs-number">1</span>]++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span>()</span> &#123;<br>passengerPlaner = <span class="hljs-keyword">new</span> myCharacterController[<span class="hljs-number">6</span>];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="BoatController">BoatController</h5><p>船控制器，用于创建船及涉及船的各种操作。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BoatController</span><br>&#123;<br>    <span class="hljs-keyword">readonly</span> GameObject boat;<br><span class="hljs-keyword">readonly</span> Moveable moveScript;<br><span class="hljs-keyword">readonly</span> Vector3 startPosition = <span class="hljs-keyword">new</span> Vector3 (<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">readonly</span> Vector3 endPosition = <span class="hljs-keyword">new</span> Vector3 (<span class="hljs-number">-5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">readonly</span> Vector3[] startPositions;<br><span class="hljs-keyword">readonly</span> Vector3[] endPositions;<br>    <br><span class="hljs-comment"><span class="hljs-doctag">///</span> change frequently</span><br>    <span class="hljs-built_in">string</span> direction; <br>myCharacterController[] passenger = <span class="hljs-keyword">new</span> myCharacterController[<span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BoatController</span>()</span> &#123;<br>direction = <span class="hljs-string">&quot;Start&quot;</span>;<br><br>startPositions = <span class="hljs-keyword">new</span> Vector3[] &#123; <span class="hljs-keyword">new</span> Vector3 (<span class="hljs-number">4.5F</span>, <span class="hljs-number">1.1F</span>, <span class="hljs-number">0</span>), <span class="hljs-keyword">new</span> Vector3 (<span class="hljs-number">5.5F</span>, <span class="hljs-number">1.1F</span>, <span class="hljs-number">0</span>) &#125;;<br>endPositions = <span class="hljs-keyword">new</span> Vector3[] &#123; <span class="hljs-keyword">new</span> Vector3 (<span class="hljs-number">-5.5F</span>, <span class="hljs-number">1.1F</span>, <span class="hljs-number">0</span>), <span class="hljs-keyword">new</span> Vector3 (<span class="hljs-number">-4.5F</span>, <span class="hljs-number">1.1F</span>, <span class="hljs-number">0</span>) &#125;;<br><br>boat = Object.Instantiate (Resources.Load (<span class="hljs-string">&quot;Prefabs/Boat&quot;</span>, <span class="hljs-keyword">typeof</span>(GameObject)), startPosition, Quaternion.identity, <span class="hljs-literal">null</span>) <span class="hljs-keyword">as</span> GameObject;<br>boat.name = <span class="hljs-string">&quot;boat&quot;</span>;<br>        boat.tag = <span class="hljs-string">&quot;Boat&quot;</span>;<br><br>moveScript = boat.AddComponent (<span class="hljs-keyword">typeof</span>(Moveable)) <span class="hljs-keyword">as</span> Moveable;<br>boat.AddComponent (<span class="hljs-keyword">typeof</span>(Click));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Move</span>()</span> &#123;<br><span class="hljs-keyword">if</span> (direction == <span class="hljs-string">&quot;End&quot;</span>) &#123;<br>moveScript.setDestination(startPosition);<br>direction = <span class="hljs-string">&quot;Start&quot;</span>;<br>&#125; <br><span class="hljs-keyword">else</span> &#123;<br>moveScript.setDestination(endPosition);<br>direction = <span class="hljs-string">&quot;End&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getEmptyIndex</span>()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; passenger.Length; i++) &#123;<br><span class="hljs-keyword">if</span> (passenger [i] == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">isEmpty</span>()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; passenger.Length; i++) &#123;<br><span class="hljs-keyword">if</span> (passenger [i] != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Vector3 <span class="hljs-title">getEmptyPosition</span>()</span> &#123;<br>Vector3 pos;<br><span class="hljs-built_in">int</span> emptyIndex = getEmptyIndex ();<br><span class="hljs-keyword">if</span> (direction == <span class="hljs-string">&quot;End&quot;</span>) &#123;<br>pos = endPositions[emptyIndex];<br>&#125; <br><span class="hljs-keyword">else</span> &#123;<br>pos = startPositions[emptyIndex];<br>&#125;<br><span class="hljs-keyword">return</span> pos;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getOnBoat</span>(<span class="hljs-params">myCharacterController characterCtrl</span>)</span> &#123;<br><span class="hljs-built_in">int</span> index = getEmptyIndex ();<br>passenger [index] = characterCtrl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> myCharacterController <span class="hljs-title">getOffBoat</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> passenger_name</span>)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; passenger.Length; i++) &#123;<br><span class="hljs-keyword">if</span> (passenger [i] != <span class="hljs-literal">null</span> &amp;&amp; passenger [i].getName () == passenger_name) &#123;<br>myCharacterController charactorCtrl = passenger [i];<br>passenger [i] = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">return</span> charactorCtrl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> GameObject <span class="hljs-title">getGameobj</span>()</span> &#123;<br><span class="hljs-keyword">return</span> boat;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getDirection</span>()</span> &#123;<br><span class="hljs-keyword">return</span> direction;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span>[] <span class="hljs-title">getNum</span>()</span> &#123;<br><span class="hljs-built_in">int</span>[] count = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; passenger.Length; i++) &#123;<br><span class="hljs-keyword">if</span> (passenger [i] == <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> 0-&gt;priest, 1-&gt;devil</span><br><span class="hljs-keyword">if</span> (passenger [i].getType () == <span class="hljs-number">0</span>) &#123;<br>count[<span class="hljs-number">0</span>]++;<br>&#125; <br><span class="hljs-keyword">else</span> &#123;<br>count[<span class="hljs-number">1</span>]++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span>()</span> &#123;<br>moveScript.reset ();<br><span class="hljs-keyword">if</span> (direction == <span class="hljs-string">&quot;End&quot;</span>) &#123;<br>Move ();<br>&#125;<br>passenger = <span class="hljs-keyword">new</span> myCharacterController[<span class="hljs-number">2</span>];<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="myCharacterController">myCharacterController</h5><p>角色控制器，用于创建牧师(Priest)与魔鬼(Devil)，及涉及角色的各种操作。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">myCharacterController</span><br>&#123;<br>    <span class="hljs-keyword">readonly</span> GameObject character;<br><span class="hljs-keyword">readonly</span> Moveable moveScript;<br><span class="hljs-keyword">readonly</span> Click click;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> 0-&gt;priest, 1-&gt;devil</span><br><span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> characterType;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> change frequently</span><br><span class="hljs-built_in">bool</span> _isOnBoat;<br>CoastController coastController;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">myCharacterController</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> _character</span>)</span> &#123;<br><span class="hljs-keyword">if</span> (_character == <span class="hljs-string">&quot;Priest&quot;</span>) &#123;<br>character = Object.Instantiate (Resources.Load (<span class="hljs-string">&quot;Prefabs/Priest&quot;</span>, <span class="hljs-keyword">typeof</span>(GameObject)), Vector3.zero, Quaternion.Euler(<span class="hljs-number">0</span>, <span class="hljs-number">180</span>, <span class="hljs-number">0</span>), <span class="hljs-literal">null</span>) <span class="hljs-keyword">as</span> GameObject;<br>characterType = <span class="hljs-number">0</span>;<br>&#125; <br>        <span class="hljs-keyword">else</span> &#123;<br>character = Object.Instantiate (Resources.Load (<span class="hljs-string">&quot;Prefabs/Devil&quot;</span>, <span class="hljs-keyword">typeof</span>(GameObject)), Vector3.zero, Quaternion.Euler(<span class="hljs-number">0</span>, <span class="hljs-number">180</span>, <span class="hljs-number">0</span>), <span class="hljs-literal">null</span>) <span class="hljs-keyword">as</span> GameObject;<br>characterType = <span class="hljs-number">1</span>;<br>&#125;<br>moveScript = character.AddComponent (<span class="hljs-keyword">typeof</span>(Moveable)) <span class="hljs-keyword">as</span> Moveable;<br><br>click = character.AddComponent (<span class="hljs-keyword">typeof</span>(Click)) <span class="hljs-keyword">as</span> Click;<br>click.setController (<span class="hljs-keyword">this</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name</span>)</span> &#123;<br>character.name = name;<br>&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTag</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> tag</span>)</span> &#123;<br>character.tag = tag;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPosition</span>(<span class="hljs-params">Vector3 pos</span>)</span> &#123;<br>character.transform.position = pos;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveTo</span>(<span class="hljs-params">Vector3 destination</span>)</span> &#123;<br>moveScript.setDestination(destination);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> <span class="hljs-title">getType</span>()</span> &#123;<br><span class="hljs-keyword">return</span> characterType;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getName</span>()</span> &#123;<br><span class="hljs-keyword">return</span> character.name;<br>&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">getTag</span>()</span> &#123;<br><span class="hljs-keyword">return</span> character.tag;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getOnBoat</span>(<span class="hljs-params">BoatController boat</span>)</span> &#123;<br>coastController = <span class="hljs-literal">null</span>;<br>character.transform.parent = boat.getGameobj().transform;<br>_isOnBoat = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getOnCoast</span>(<span class="hljs-params">CoastController coast</span>)</span> &#123;<br>coastController = coast;<br>character.transform.parent = <span class="hljs-literal">null</span>;<br>_isOnBoat = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">isOnBoat</span>()</span> &#123;<br><span class="hljs-keyword">return</span> _isOnBoat;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> CoastController <span class="hljs-title">getCoastController</span>()</span> &#123;<br><span class="hljs-keyword">return</span> coastController;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reset</span>()</span> &#123;<br>moveScript.reset ();<br>coastController = (Director.getInstance ().currentSceneController <span class="hljs-keyword">as</span> FirstControllor).startCoast;<br>getOnCoast (coastController);<br>setPosition (coastController.getEmptyPosition ());<br>coastController.getOnCoast (<span class="hljs-keyword">this</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="FirstController">FirstController</h5><p>最高层控制器，实现场记接口、用户行动接口的功能。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">FirstController</span> : <span class="hljs-title">MonoBehaviour</span>, <span class="hljs-title">ISceneController</span>, <span class="hljs-title">IUserAction</span><br>&#123;<br>    <span class="hljs-keyword">readonly</span> Vector3 waterPos = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>,<span class="hljs-number">0.5F</span>,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">public</span> CoastController startCoast;<br>    <span class="hljs-keyword">public</span> CoastController endCoast;<br>    <span class="hljs-keyword">public</span> BoatController boat;<br>    <span class="hljs-keyword">private</span> myCharacterController[] characters;<br>    myUserGUI userGUI;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span> ()</span><br>    &#123;<br>        Director director = Director.getInstance();<br>        director.currentSceneController = <span class="hljs-keyword">this</span>;<br>        userGUI = gameObject.AddComponent&lt;myUserGUI&gt;() <span class="hljs-keyword">as</span> myUserGUI;<br>        characters = <span class="hljs-keyword">new</span> myCharacterController[<span class="hljs-number">6</span>];<br>        LoadResources();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LoadResources</span>()</span>&#123;<br>        GameObject water = Instantiate(Resources.Load(<span class="hljs-string">&quot;Prefabs/Water&quot;</span>, <span class="hljs-keyword">typeof</span>(GameObject)), waterPos, Quaternion.identity, <span class="hljs-literal">null</span>) <span class="hljs-keyword">as</span> GameObject;<br>        water.name = <span class="hljs-string">&quot;water&quot;</span>;<br>        water.tag = <span class="hljs-string">&quot;Water&quot;</span>;<br><br>        startCoast = <span class="hljs-keyword">new</span> CoastController(<span class="hljs-string">&quot;Start&quot;</span>);<br>        endCoast = <span class="hljs-keyword">new</span> CoastController(<span class="hljs-string">&quot;End&quot;</span>);<br>        boat = <span class="hljs-keyword">new</span> BoatController();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>            myCharacterController priest = <span class="hljs-keyword">new</span> myCharacterController(<span class="hljs-string">&quot;Priest&quot;</span>);<br>            priest.setName(<span class="hljs-string">&quot;Priest &quot;</span>+i);<br>            priest.setTag(<span class="hljs-string">&quot;Priest&quot;</span>);<br>            priest.setPosition(startCoast.getEmptyPosition());<br>            priest.getOnCoast(startCoast);<br>            startCoast.getOnCoast(priest);<br>            characters[i] = priest;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>            myCharacterController devil = <span class="hljs-keyword">new</span> myCharacterController(<span class="hljs-string">&quot;Devil&quot;</span>);<br>            devil.setName(<span class="hljs-string">&quot;Devil &quot;</span>+i);<br>            devil.setTag(<span class="hljs-string">&quot;Devil&quot;</span>);<br>            devil.setPosition(startCoast.getEmptyPosition());<br>            devil.getOnCoast(startCoast);<br>            startCoast.getOnCoast(devil);<br>            characters[i+<span class="hljs-number">3</span>] = devil;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">moveBoat</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>(boat.isEmpty())<br>            <span class="hljs-keyword">return</span>;<br>        boat.Move();<br>        userGUI.status = checkGameOver();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ClickCharacter</span>(<span class="hljs-params">myCharacterController cC</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(cC.isOnBoat())&#123;<br>            CoastController coast;<br>            <span class="hljs-keyword">if</span>(boat.getDirection()==<span class="hljs-string">&quot;Start&quot;</span>)<br>                coast = startCoast;<br>            <span class="hljs-keyword">else</span><br>                coast = endCoast;<br><br>            boat.getOffBoat(cC.getName());<br>            cC.moveTo(coast.getEmptyPosition());<br>            cC.getOnCoast(coast);<br>            coast.getOnCoast(cC);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            CoastController coast = cC.getCoastController();<br>            <span class="hljs-keyword">if</span>(boat.getEmptyIndex () == <span class="hljs-number">-1</span> || coast.getDirection() != boat.getDirection())<br>                <span class="hljs-keyword">return</span>;<br>            coast.getOffCoast(cC.getName());<br>            cC.moveTo(boat.getEmptyPosition());<br>            cC.getOnBoat(boat);<br>            boat.getOnBoat(cC);<br>        &#125;<br><br>        userGUI.status = checkGameOver();<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> -1-&gt;lose 0-&gt;unfinish 1-&gt;win</span><br>    <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">checkGameOver</span>()</span>&#123;<br>        <span class="hljs-built_in">int</span> startPriest = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> endPriest = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> startDevil = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> endDevil = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-built_in">int</span>[] startCount = startCoast.getNum();<br>        startPriest += startCount[<span class="hljs-number">0</span>];<br>        startDevil += startCount[<span class="hljs-number">1</span>];<br><br>        <span class="hljs-built_in">int</span>[] endCount = endCoast.getNum();<br>        endPriest += endCount[<span class="hljs-number">0</span>];<br>        endDevil += endCount[<span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">if</span>(endDevil+endPriest ==<span class="hljs-number">6</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-built_in">int</span>[] boatCount = boat.getNum();<br>        <span class="hljs-keyword">if</span>(boat.getDirection() == <span class="hljs-string">&quot;End&quot;</span>)&#123;<br>            endPriest += boatCount[<span class="hljs-number">0</span>];<br>            endDevil += boatCount[<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            startPriest += boatCount[<span class="hljs-number">0</span>];<br>            startDevil += boatCount[<span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(startPriest&lt;startDevil &amp;&amp; startPriest&gt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">if</span>(endPriest&lt;endDevil &amp;&amp; endPriest&gt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Restart</span>()</span>&#123;<br>        boat.reset();<br>        startCoast.reset();<br>        endCoast.reset();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;characters.Length;i++)<br>            characters[i].reset();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Click">Click</h5><p>点击脚本，检测船和角色是否被点击，从而进行移动的操作。其中，角色和船必须含有碰撞体的组件，不然无法监听对象是否被点击。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Click</span> : <span class="hljs-title">MonoBehaviour</span> <br>&#123;<br>    IUserAction userAction;<br>    myCharacterController characterController;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setController</span>(<span class="hljs-params">myCharacterController cC</span>)</span>&#123;<br>        characterController = cC;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span>&#123;<br>        userAction = Director.getInstance().currentSceneController <span class="hljs-keyword">as</span> IUserAction;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnMouseDown</span>()</span>&#123;<br>        <span class="hljs-keyword">if</span>(gameObject.tag == <span class="hljs-string">&quot;Boat&quot;</span>)<br>            userAction.moveBoat();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(gameObject.tag == <span class="hljs-string">&quot;Priest&quot;</span> || gameObject.tag == <span class="hljs-string">&quot;Devil&quot;</span>)<br>            userAction.ClickCharacter(characterController);<br>        Debug.Log(<span class="hljs-string">&quot;Click&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="myUserGUI">myUserGUI</h5><p>游戏结束的界面设计。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">myUserGUI</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-keyword">private</span> IUserAction action;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> status = <span class="hljs-number">0</span>;<br>    GUIStyle style;<br>    GUIStyle buttonStyle;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span>&#123;<br>        action = Director.getInstance ().currentSceneController <span class="hljs-keyword">as</span> IUserAction;<br><br>style = <span class="hljs-keyword">new</span> GUIStyle();<br>style.fontSize = <span class="hljs-number">40</span>;<br>style.alignment = TextAnchor.MiddleCenter;<br><br>buttonStyle = <span class="hljs-keyword">new</span> GUIStyle(<span class="hljs-string">&quot;button&quot;</span>);<br>buttonStyle.fontSize = <span class="hljs-number">30</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>()</span> &#123;<br><span class="hljs-keyword">if</span> (status == <span class="hljs-number">-1</span>) &#123;<br>GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width/<span class="hljs-number">2</span><span class="hljs-number">-50</span>, Screen.height/<span class="hljs-number">2</span><span class="hljs-number">-85</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;Gameover!&quot;</span>, style);<br><span class="hljs-keyword">if</span> (GUI.Button(<span class="hljs-keyword">new</span> Rect(Screen.width/<span class="hljs-number">2</span><span class="hljs-number">-70</span>, Screen.height/<span class="hljs-number">2</span>, <span class="hljs-number">140</span>, <span class="hljs-number">70</span>), <span class="hljs-string">&quot;Restart&quot;</span>, buttonStyle)) &#123;<br>status = <span class="hljs-number">0</span>;<br>action.Restart ();<br>&#125;<br>&#125; <br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(status == <span class="hljs-number">1</span>) &#123;<br>GUI.Label(<span class="hljs-keyword">new</span> Rect(Screen.width/<span class="hljs-number">2</span><span class="hljs-number">-50</span>, Screen.height/<span class="hljs-number">2</span><span class="hljs-number">-85</span>, <span class="hljs-number">100</span>, <span class="hljs-number">50</span>), <span class="hljs-string">&quot;You win!&quot;</span>, style);<br><span class="hljs-keyword">if</span> (GUI.Button(<span class="hljs-keyword">new</span> Rect(Screen.width/<span class="hljs-number">2</span><span class="hljs-number">-70</span>, Screen.height/<span class="hljs-number">2</span>, <span class="hljs-number">140</span>, <span class="hljs-number">70</span>), <span class="hljs-string">&quot;Restart&quot;</span>, buttonStyle)) &#123;<br>status = <span class="hljs-number">0</span>;<br>action.Restart ();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="实现效果">实现效果</h5><p><img src="/img/2022/Homework3/PandD.gif" alt="PandD"></p><h5 id="有待改进">有待改进</h5><ul><li>没有添加角色行走的动画，及制作朝向</li><li>河水和船等动画也没有制作</li><li>没有加1min的倒计时</li><li>游戏失败没有等船到岸之后弹出来</li></ul><blockquote><p>Cauchy       2022.10.23</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HW2: 离散仿真引擎基础</title>
    <link href="/2022/10/04/2022/Homework2/"/>
    <url>/2022/10/04/2022/Homework2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作业简介：<br>1.简答题（涉及GameObject, Transform, Assets, Prefabs, Component, MonoBehaviour等）<br>2.编程实践（仅允许使用IMGUI构建UI，训练数据-控制分离的编程思维）<br>3.思考题（涉及游戏设计模式）</p></blockquote><span id="more"></span><p>🌈</p><h3 id="一、简答题">一、简答题</h3><ol><li><p>解释游戏对象(<strong>GameObjects</strong>)和资源(<strong>Assets</strong>)的区别与联系</p><p><strong>GameObjects</strong>：是 Unity 中的基础对象，表示角色、道具和景物。它们本身并没有取得多大作为，但它们充当组件(Component)的容器，而组件可实现功能。</p><p><img src="/img/2022/Homework2/02.jpg" alt=""></p><p>我们可以看到GameObject列表下有各种属性的对象，包括空属性对象、3D对象、效果、灯光等</p><p><strong>Assets</strong>：表示 Unity 项目中用来创建游戏或应用的任何项；也可以代表项目中的视觉或音频元素，例如 3D 模型、纹理、精灵、音效或音乐；还可以表示更抽象的项目，例如任何用途的颜色渐变、动画遮罩或任意文本或数字数据。</p><p><img src="/img/2022/Homework2/03.jpg" alt=""></p><p>我们可以看到Assets创建下有很多类型的资源，如C#脚本，着色器，预制件等。</p><p>简单地理解，游戏对象是真正加入到游戏场景里的实体，类似一个空盒子，需要向里面添加各种组件来实功能。资源是创建或外导入的各种数据，可以应用到不同游戏对象身上，可以只是存储在项目里，不一定会使用到当前的游戏场景中。</p><p><img src="/img/2022/Homework2/01.jpg" alt=""></p></li><li><p>下载几个游戏案列，分别总结资源、对象组织和结构（指资源的目录组织结构与游戏对象树的层次结构）</p><p>这里用作展示的是官方的游戏教程里的资源与对象的组织和结构。</p><p><img src="/img/2022/Homework2/04.jpg" alt=""></p><p>我们可以看到<strong>资源</strong>一般是按<strong>用途</strong>来分的，不同的文件夹存放不同类别的资源，包括音频、角色、环境、脚本、预制件、场景等，这里还可以看到模型资源里的环境精灵是按颜色来分类的，脚本里面按使用场景分类。</p><p><img src="/img/2022/Homework2/05.jpg" alt=""></p><p><img src="/img/2022/Homework2/06.jpg" alt=""></p><p><strong>游戏对象</strong>主要是根据<strong>功能</strong>不同分类的，可以看到第一个游戏对象树有UI画布、摄像机、角色、格子、敌人等分支，第二个游戏对象树则是利用空对象来写分割线区分结构。</p><p>养成合理分类资源与游戏对象的好习惯，能让我们更高效地制作游戏。</p></li><li><p>编写一个代码，使用 debug 语句来验证 <code>MonoBehaviour</code> 基本行为或事件触发的条件</p><ul><li>基本行为包括 <code>Awake()</code> <code>Start()</code> <code>Update()</code> <code>FixedUpdate()</code> <code>LateUpdate()</code></li><li>常用事件包括 <code>OnGUI()</code> <code>OnDisable()</code> <code>OnEnable()</code></li></ul><p><em>“MonoBehaviour 类是一个基类，所有 Unity 脚本都默认派生自该类。MonoBehaviour 类允许您启动、停止和管理协程。MonoBehaviour 类提供对大量事件消息的访问，允许您根据项目中当前发生的情况执行代码。”</em></p><p><strong>MonoBehaviour 方法简介</strong></p><ul><li><code>Awake</code>：在加载脚本实例时调用，无论该脚本是否启用，初始化脚本时都会调用。其在 Start 前调用</li><li><code>Start</code>：在首次调用任何 Update 方法之前启用脚本时，在帧上调用</li><li><code>Update</code>：如果启用了 MonoBehaviour，则每帧调用 Update</li><li><code>FixedUpdate</code>：具有物理系统的频率；每个固定帧率帧调用该函数；在 FixedUpdate之后，进行Physics系统计算。帧率可以通过 Time.fixedDeltaTime 来访问。与Update相互独立。</li><li><code>LateUpdate</code>：如果启用了 Behaviour（指可启用或禁用的组件），则每帧在Update调用后调用 LateUpdate，对于安排脚本的执行顺序很有用。</li><li><code>OnGUI</code>：系统调用 OnGUI 来渲染和处理 GUI 事件，是唯一可以实现**“即时模式”GUI (IMGUI)**系统来渲染和处理 GUI 事件的函数。OnGUI 实现可以每帧调用多次（每个事件调用一次），若MonoBehaviour 的 enabled 属性设置为 false，则不会调用 OnGUI()。</li><li><code>OnDisable</code>：该函数在行为被禁用时调用。当对象销毁时也会调用该函数，它可用于任何清理代码。 当编译完成后重新加载脚本时，将调用 OnDisable，并在加载脚本后调用 OnEnable。</li><li><code>OnEnable</code>：该函数在对象变为启用和激活状态时调用。</li></ul><p>代码验证：</p> <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span> &#123;Debug.Log(<span class="hljs-string">&quot;Awake&quot;</span>);&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span> &#123;Debug.Log(<span class="hljs-string">&quot;Start&quot;</span>);&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span> &#123;Debug.Log(<span class="hljs-string">&quot;Update&quot;</span>);&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>()</span> &#123;Debug.Log(<span class="hljs-string">&quot;Fixed&quot;</span>);&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>()</span> &#123;Debug.Log(<span class="hljs-string">&quot;OnGUI&quot;</span>);&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnEnable</span>()</span> &#123;Debug.Log(<span class="hljs-string">&quot;Enabled&quot;</span>);&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnDisable</span>()</span> &#123;Debug.Log(<span class="hljs-string">&quot;Disabled&quot;</span>);&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/2022/Homework2/07.jpg" alt=""></p></li><li><p>查找脚本手册，了解 GameObjects, Transform, Component 对象</p><ul><li>分别翻译官方对三个对象的描述(Description)</li><li>描述下图中 table 对象(实体)的属性、table 的 Transform 的属性、table 的部件</li><li>用UML图描述三者的关系</li></ul><p><strong>官方描述</strong></p><ul><li><p><strong>GameObject</strong> 是 Unity 中的基础对象，表示角色、道具和景物，可以被用来表示所有可以存在于场景中的事物。它是Unity中场景的建筑块，可作为决定GameObject外观功能的功能组件的容器。在脚本中，GameObject类提供了一个可以在代码中使用的方法集合，包括查找、建立连接和在它们 之间发送消息，以及添加或移除附加到 GameObject 的组件和设置它们在场景中与状态有关的值。</p></li><li><p><strong>Transform</strong> 用于存储游戏对象的位置、旋转、缩放和父子化状态。每个游戏对象始终附加一个变换组件，无法删除变换组件或创建没有变换组件的游戏对象。</p></li><li><p><strong>Component</strong> 是每个GameObject的功能部分，它包含一些可编辑的属性，可以通过编辑这些属性来定义GameObject的行为。</p></li></ul><p><strong>图</strong></p><p><img src="/img/2022/Homework2/08.jpg" alt=""></p><p>Table的GameObject属性包含Tag(标签)、Layer(层)、Static(是否静态)、勾选框(是否活动)、属性名；<br>Table的Transform属性包含Position(坐标)、Rotation(旋转角)、Scale(大小)；<br>Table的Component属性包括Cube(Mesh Filter)、Mesh Renderer、Box Collider、RIgidbody、Hello(Script)、Red(Material)。</p><p><strong>UML图</strong></p><p><img src="/img/2022/Homework2/09.jpg" alt=""></p></li><li><p>资源预设(<strong>Prefabs</strong>)与对象克隆(<strong>clone</strong>)</p><ul><li><p>预设(Prefabs)有什么好处?</p><p>Unity 的<strong>Prenfabs</strong>系统允许创建、配置和存储游戏对象及其所有组件、属性值和子游戏对象作为可重用资源。预制件资源充当模板，在此模板的基础之上可以在场景中创建新的预制件实例。这可以避免重复制作的无用功，提高资源复用率，节省资源空间。</p></li><li><p>预设与对象克隆(clone or copy or Instantiate of Unity Object)关系?</p><p>预设本身不需要有实例化的游戏对象，而克隆需要复制实例化的游戏对象。预设也更方便进行批量修改。</p></li><li><p>制作table预制，写一段代码将table预制资源实例化成游戏对象</p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">hello</span>:<span class="hljs-title">MonoBehaviour</span><br>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>GameObject table = (GameObject)Resources.Load(<span class="hljs-string">&quot;table&quot;</span>);<br>table = Instantiate(table);<br><br>table.transform.parent = <span class="hljs-keyword">this</span>.transform;<br>table.transform.position = <span class="hljs-keyword">new</span> Vector3(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ol><p>🍰</p><h3 id="二、编程实践">二、编程实践</h3><p>源码地址：<a href="https://github.com/Cauchyoooo/3DGameDesign/blob/main/hw2/MineGame.cs">https://github.com/Cauchyoooo/3DGameDesign/blob/main/hw2/MineGame.cs</a></p><p>这里是利用IMGUI做了一个扫雷小游戏。运行窗口大小为Full HD(1920x1080)</p><p>实现的效果如下图</p><p><img src="/img/2022/Homework2/win.gif" alt=""></p><p><strong>数据定义部分代码：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-comment">// Data</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span>[,] control_arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">16</span>,<span class="hljs-number">20</span>]; <span class="hljs-comment">//用于记录雷和数字 -1是雷 0是空 其他是周围的雷数</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span>[,] show_arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">16</span>,<span class="hljs-number">20</span>]; <span class="hljs-comment">//用于记录格子可见性 0是可见 1是不可见</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span>[,] mark_arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-number">16</span>,<span class="hljs-number">20</span>]; <span class="hljs-comment">//用于玩家标记雷 标记雷为1 此时按钮不可点击</span><br>   <br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> mine_num = <span class="hljs-number">60</span>; <span class="hljs-comment">//用于记录剩余雷数</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> wrong = <span class="hljs-number">0</span>; <span class="hljs-comment">//用于记录标错的雷数</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> time = <span class="hljs-number">0</span>; <span class="hljs-comment">//用于记录用时</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">float</span> tmptime = <span class="hljs-number">0</span>; <span class="hljs-comment">//用于记录上一帧时间(不会重复初始化)</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> state = <span class="hljs-number">0</span>; <span class="hljs-comment">//0为挖矿模式，1为标记模式 输了为-1，赢了为-2</span><br><br>   <span class="hljs-comment">// Controls Style</span><br>   GUIStyle smileStyle = <span class="hljs-keyword">new</span> GUIStyle();<br>   GUIStyle mineStyle = <span class="hljs-keyword">new</span> GUIStyle();<br>   GUIStyle[] numStyle = <span class="hljs-keyword">new</span> GUIStyle[<span class="hljs-number">8</span>]; <span class="hljs-comment">//记录数字1-8的格式</span><br>   GUIStyle state0 = <span class="hljs-keyword">new</span> GUIStyle();<br>   GUIStyle state1 = <span class="hljs-keyword">new</span> GUIStyle();<br>   GUIStyle worl = <span class="hljs-keyword">new</span> GUIStyle();<br>   GUIStyle txt = <span class="hljs-keyword">new</span> GUIStyle();<br></code></pre></td></tr></table></figure><p>由于不是很想利用Texture2D导入图片素材，这里用的是IMGUI里简陋的<code>GUIStyle()</code>，配合可显示的Unicode符号食用。</p><p><strong>数据初始启动部分代码：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Start</span> ()</span> &#123;<br>        <span class="hljs-comment">// 对图标格式的初始化</span><br>        smileStyle.fontSize=<span class="hljs-number">50</span>;<br>        smileStyle.normal.textColor=Color.yellow;<br>        smileStyle.alignment=TextAnchor.MiddleCenter;<br><br>        mineStyle.fontSize=<span class="hljs-number">20</span>;<br>        mineStyle.normal.textColor=Color.red;<br>        mineStyle.alignment=TextAnchor.MiddleCenter;<br><br>        state0.fontSize=<span class="hljs-number">20</span>;<br>        state0.normal.textColor=Color.red;<br>        state0.alignment=TextAnchor.MiddleCenter;<br><br>        state1.fontSize=<span class="hljs-number">20</span>;<br>        state1.normal.textColor=Color.black;<br>        state1.alignment=TextAnchor.MiddleCenter;<br><br>        worl.fontSize = <span class="hljs-number">50</span>;<br>        worl.normal.textColor = Color.red; <span class="hljs-comment">//win=red / lose=blue</span><br>        worl.alignment=TextAnchor.MiddleCenter;<br><br>        txt.fontSize = <span class="hljs-number">30</span>;<br>        txt.normal.textColor=Color.white;<br>        txt.alignment=TextAnchor.MiddleCenter;<br>         <br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">8</span>;i++)&#123;<br>            numStyle[i] = <span class="hljs-keyword">new</span> GUIStyle();<br>            numStyle[i].fontSize = <span class="hljs-number">20</span>;<br>            numStyle[i].alignment = TextAnchor.MiddleCenter;<br>        &#125;<br>        numStyle[<span class="hljs-number">0</span>].normal.textColor=Color.blue; <span class="hljs-comment">//数字1红色</span><br>        numStyle[<span class="hljs-number">1</span>].normal.textColor=Color.green; <span class="hljs-comment">//数字2蓝色</span><br>        numStyle[<span class="hljs-number">2</span>].normal.textColor=Color.red; <span class="hljs-comment">//数字3蓝色</span><br>        numStyle[<span class="hljs-number">3</span>].normal.textColor=<span class="hljs-keyword">new</span> Color(<span class="hljs-number">1.00f</span>,<span class="hljs-number">0.84f</span>,<span class="hljs-number">0.00f</span>,<span class="hljs-number">1.00f</span>); <span class="hljs-comment">//数字4蓝色</span><br>        numStyle[<span class="hljs-number">4</span>].normal.textColor=<span class="hljs-keyword">new</span> Color(<span class="hljs-number">0.63f</span>,<span class="hljs-number">0.13f</span>,<span class="hljs-number">0.94f</span>,<span class="hljs-number">1.00f</span>); <span class="hljs-comment">//数字5紫色</span><br>        numStyle[<span class="hljs-number">5</span>].normal.textColor=<span class="hljs-keyword">new</span> Color(<span class="hljs-number">1.00f</span>,<span class="hljs-number">0.38f</span>,<span class="hljs-number">0.00f</span>,<span class="hljs-number">1.00f</span>); <span class="hljs-comment">//数字6橙色</span><br>        numStyle[<span class="hljs-number">6</span>].normal.textColor=<span class="hljs-keyword">new</span> Color(<span class="hljs-number">1.00f</span>,<span class="hljs-number">0.75f</span>,<span class="hljs-number">0.80f</span>,<span class="hljs-number">1.00f</span>); <span class="hljs-comment">//数字7粉色</span><br>        numStyle[<span class="hljs-number">7</span>].normal.textColor=Color.black; <span class="hljs-comment">//数字8黑色</span><br><br>        Init(); <span class="hljs-comment">//游戏参数初始化</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>由于GUIStyle在游戏过程中，基本不会有何变化，就放在Start()函数调用初始化。</p><p><strong>游戏参数初始化代码：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Init</span>()</span> &#123;<br>        <span class="hljs-comment">// 时间，雷数等参数初始化</span><br>        time = <span class="hljs-number">0</span>;<br>        mine_num = <span class="hljs-number">60</span>;<br>        wrong = <span class="hljs-number">0</span>;<br>        state = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">20</span>;j++)&#123;<br>                <span class="hljs-comment">// 格子可见性初始化</span><br>                show_arr[i,j] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 雷区初始化</span><br>        clearMine();<br>        InitMine();<br>    &#125;<br></code></pre></td></tr></table></figure><p>每局新游戏开始前的初始化函数，要把各种参数归零，并重新随机生成雷区。</p><p><strong>雷区初始化代码：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitMine</span>()</span>&#123;<br>        <span class="hljs-comment">//初始化数字和雷区</span><br>        <span class="hljs-built_in">int</span> num=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (num&lt;<span class="hljs-number">60</span>)<br>        &#123;<br>            <span class="hljs-built_in">int</span> x=Random.Range(<span class="hljs-number">0</span>,<span class="hljs-number">16</span>);<br>            <span class="hljs-built_in">int</span> y=Random.Range(<span class="hljs-number">0</span>,<span class="hljs-number">20</span>);<br>            <span class="hljs-keyword">if</span>(control_arr[x,y]==<span class="hljs-number">0</span>)&#123;<br>                control_arr[x,y] = <span class="hljs-number">-1</span>;<br>                num++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">20</span>;j++)&#123;<br>                <span class="hljs-keyword">if</span>(control_arr[i,j]&gt;<span class="hljs-number">-1</span>)&#123;<br>                    <span class="hljs-comment">//左边</span><br>                    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span> &amp;&amp; control_arr[i<span class="hljs-number">-1</span>,j]==<span class="hljs-number">-1</span>)<br>                        control_arr[i,j]++;<br>                    <span class="hljs-comment">//右边</span><br>                    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">15</span> &amp;&amp; control_arr[i+<span class="hljs-number">1</span>,j]==<span class="hljs-number">-1</span>)<br>                        control_arr[i,j]++;<br>                    <span class="hljs-comment">//上方</span><br>                    <span class="hljs-keyword">if</span>(j&gt;<span class="hljs-number">0</span> &amp;&amp; control_arr[i,j<span class="hljs-number">-1</span>]==<span class="hljs-number">-1</span>)<br>                        control_arr[i,j]++;<br>                    <span class="hljs-comment">//下方</span><br>                    <span class="hljs-keyword">if</span>(j&lt;<span class="hljs-number">19</span> &amp;&amp; control_arr[i,j+<span class="hljs-number">1</span>]==<span class="hljs-number">-1</span>)<br>                        control_arr[i,j]++;<br>                    <span class="hljs-comment">//左上角</span><br>                    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span> &amp;&amp; j&gt;<span class="hljs-number">0</span> &amp;&amp; control_arr[i<span class="hljs-number">-1</span>,j<span class="hljs-number">-1</span>]==<span class="hljs-number">-1</span>)<br>                        control_arr[i,j]++;<br>                    <span class="hljs-comment">//右下角</span><br>                    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">15</span> &amp;&amp; j&lt;<span class="hljs-number">19</span> &amp;&amp; control_arr[i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>]==<span class="hljs-number">-1</span>)<br>                        control_arr[i,j]++;<br>                    <span class="hljs-comment">//右上角</span><br>                    <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">15</span> &amp;&amp; j&gt;<span class="hljs-number">0</span> &amp;&amp; control_arr[i+<span class="hljs-number">1</span>,j<span class="hljs-number">-1</span>]==<span class="hljs-number">-1</span>)<br>                        control_arr[i,j]++;<br>                    <span class="hljs-comment">//左下角</span><br>                    <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span> &amp;&amp; j&lt;<span class="hljs-number">19</span> &amp;&amp; control_arr[i<span class="hljs-number">-1</span>,j+<span class="hljs-number">1</span>]==<span class="hljs-number">-1</span>)<br>                        control_arr[i,j]++;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">clearMine</span>()</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">20</span>;j++)&#123;<br>                control_arr[i,j]=<span class="hljs-number">0</span>;<br>                mark_arr[i,j]=<span class="hljs-number">0</span>;  <br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>clearMine()</code>函数会把上一局的标记去除，雷全部清除，且格子值全部设为0，配合生成雷的函数<code>InitMine()</code>，<code>InitMine()</code>初始化雷的位置(值为-1)后，会通过循环得出每个格子的数字（周围一圈的雷数）。</p><p><strong>OnGUI()循环代码：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>()</span> &#123;<br>        GUI.Box(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">720</span>,<span class="hljs-number">180</span>,<span class="hljs-number">480</span>,<span class="hljs-number">720</span>),<span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-comment">// 生成smile按钮 for restart</span><br>            <span class="hljs-keyword">if</span>(GUI.Button(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">935</span>,<span class="hljs-number">220</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>), <span class="hljs-string">&quot;☺&quot;</span>,smileStyle))&#123;<br>                Debug.Log(<span class="hljs-string">&quot;Push Smile&quot;</span>);<br>                <span class="hljs-keyword">if</span>(state&gt;=<span class="hljs-number">0</span>)<br>                    Init();             <br>            &#125;<br>            <span class="hljs-comment">// 生成挖雷按钮</span><br>            <span class="hljs-keyword">if</span>(GUI.Button(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">1000</span>,<span class="hljs-number">200</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>), <span class="hljs-string">&quot;挖&quot;</span>,state0))&#123;<br>                state = <span class="hljs-number">0</span>;<br>                state0.normal.textColor=Color.red;<br>                state1.normal.textColor=Color.black;<br><br>            &#125;<br><br>            <span class="hljs-comment">// 生成标记按钮</span><br>            <span class="hljs-keyword">if</span>(GUI.Button(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">1000</span>,<span class="hljs-number">240</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>), <span class="hljs-string">&quot;标&quot;</span>,state1))&#123;<br>                state = <span class="hljs-number">1</span>;<br>                state0.normal.textColor=Color.black;<br>                state1.normal.textColor=Color.red;<br><br>            &#125;<br>            <span class="hljs-comment">//显示剩余雷数</span><br>            GUI.Button(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">736</span>,<span class="hljs-number">220</span>,<span class="hljs-number">160</span>,<span class="hljs-number">60</span>), <span class="hljs-string">&quot;剩余雷数:&quot;</span>+mine_num.ToString());<br><br>            <span class="hljs-comment">//显示时间</span><br>            GUI.Button(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">1050</span>,<span class="hljs-number">220</span>,<span class="hljs-number">130</span>,<span class="hljs-number">60</span>), <span class="hljs-string">&quot;用时(s):&quot;</span>+time.ToString());<br><br>            <span class="hljs-comment">// 每个大小28*28</span><br>            <span class="hljs-comment">// 生成可点击扫雷按钮</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">20</span>;j++)&#123;<br>                    <span class="hljs-keyword">if</span>(show_arr[i,j]==<span class="hljs-number">1</span>)    <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-comment">// 标记的格子可取消标记</span><br>                    <span class="hljs-keyword">if</span>(mark_arr[i,j]==<span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">if</span>(GUI.Button(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">736</span>+i*<span class="hljs-number">28</span>,<span class="hljs-number">300</span>+j*<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>),<span class="hljs-string">&quot;✯&quot;</span>))&#123;<br>                            <span class="hljs-keyword">if</span>(state == <span class="hljs-number">1</span>)&#123;<br>                                mark_arr[i,j] = <span class="hljs-number">0</span>;<br>                                mine_num++;<br>                                <span class="hljs-keyword">if</span> (control_arr[i,j]&lt;<span class="hljs-number">0</span>)<br>                                    wrong--;<br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span>(GUI.Button(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">736</span>+i*<span class="hljs-number">28</span>,<span class="hljs-number">300</span>+j*<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>),<span class="hljs-string">&quot;&quot;</span>))&#123;<br>                        <span class="hljs-comment">// 按下按钮的行为</span><br>                        <span class="hljs-keyword">if</span>(state == <span class="hljs-number">1</span>)&#123;<br>                            mark_arr[i,j] = <span class="hljs-number">1</span>;<br>                            mine_num--;<br>                            <span class="hljs-keyword">if</span> (control_arr[i,j]&gt;<span class="hljs-number">-1</span>)<br>                                wrong++;<br>                            <span class="hljs-keyword">if</span> (mine_num==<span class="hljs-number">0</span>)<br>                            &#123;<br>                                <span class="hljs-keyword">if</span>(wrong&gt;<span class="hljs-number">0</span>)&#123;<br>                                    showAllMine();<br>                                    state = <span class="hljs-number">-1</span>; <span class="hljs-comment">//lose</span><br>                                &#125;<br>                                <span class="hljs-keyword">else</span>&#123;    <br>                                    state = <span class="hljs-number">-2</span>; <span class="hljs-comment">//win</span><br>                                &#125;<br>                                <br>                            &#125;<br>                        &#125;<br>                        <span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">if</span>(mark_arr[i,j]==<span class="hljs-number">0</span>)&#123;<br>                                show_arr[i,j]=<span class="hljs-number">1</span>;<br>                                <span class="hljs-keyword">if</span>(control_arr[i,j]==<span class="hljs-number">0</span>)<br>                                    showEmpty(i,j);<br>                                <span class="hljs-keyword">if</span>(control_arr[i,j]&lt;<span class="hljs-number">0</span>)&#123;<br>                                    showAllMine();<br>                                    state = <span class="hljs-number">-1</span>; <span class="hljs-comment">//lose</span><br>                                &#125;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">// 显示数字和雷    </span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">20</span>;j++)&#123;<br>                    <span class="hljs-keyword">if</span>(show_arr[i,j]==<span class="hljs-number">0</span>)    <span class="hljs-keyword">continue</span>; <span class="hljs-comment">//</span><br>                    <span class="hljs-built_in">int</span> ctlnum = control_arr[i,j];<br>                    <span class="hljs-keyword">if</span>(ctlnum==<span class="hljs-number">0</span>)&#123;<br>                        GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">736</span>+i*<span class="hljs-number">28</span>,<span class="hljs-number">300</span>+j*<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>),<span class="hljs-string">&quot; &quot;</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ctlnum&gt;<span class="hljs-number">0</span>)&#123;<br>                        GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">736</span>+i*<span class="hljs-number">28</span>,<span class="hljs-number">300</span>+j*<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>),ctlnum.ToString(),numStyle[ctlnum<span class="hljs-number">-1</span>]);<br>                    &#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">736</span>+i*<span class="hljs-number">28</span>,<span class="hljs-number">300</span>+j*<span class="hljs-number">28</span>,<span class="hljs-number">28</span>,<span class="hljs-number">28</span>),<span class="hljs-string">&quot;✵&quot;</span>,mineStyle);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>        <span class="hljs-keyword">if</span>(state&lt;<span class="hljs-number">0</span>)&#123;<br>            GUI.Box(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">810</span>,<span class="hljs-number">420</span>,<span class="hljs-number">300</span>,<span class="hljs-number">240</span>),<span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-keyword">if</span>(GUI.Button(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">910</span>,<span class="hljs-number">630</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>), <span class="hljs-string">&quot;Restart&quot;</span>))<br>                Init();<br>            <span class="hljs-keyword">if</span>(state == <span class="hljs-number">-1</span>)&#123;<br>                worl.normal.textColor =  Color.blue;<br>                GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">910</span>,<span class="hljs-number">440</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>), <span class="hljs-string">&quot;LOSE&quot;</span>, worl);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                worl.normal.textColor =  Color.red;<br>                GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">910</span>,<span class="hljs-number">440</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>), <span class="hljs-string">&quot;WIN&quot;</span>, worl);<br>            &#125;  <br>            <span class="hljs-built_in">int</span> endnum = <span class="hljs-number">60</span> - mine_num - wrong;<br>            GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">910</span>,<span class="hljs-number">510</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>), <span class="hljs-string">&quot;扫雷数：&quot;</span>+endnum.ToString(), txt);<br>            GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">910</span>,<span class="hljs-number">560</span>,<span class="hljs-number">100</span>,<span class="hljs-number">50</span>), <span class="hljs-string">&quot;总用时：&quot;</span>+time.ToString(), txt);<br><br>            tmptime = Mathf.Floor(Time.fixedTime);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//计时</span><br>            <span class="hljs-keyword">if</span>(Mathf.Floor(Time.fixedTime)-tmptime==<span class="hljs-number">1</span>)&#123;<br>                tmptime = Mathf.Floor(Time.fixedTime);<br>                time++;<br>            &#125;<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>由于IMGUI的控件部分只能在<code>OnGUI()</code>函数使用，因此这里会写的比较冗杂，嵌套也比较多。这里利用Time类来辅助我们计时。</p><p><strong>其他相关代码：</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showAllMine</span>()</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">20</span>;j++)&#123;<br>                <span class="hljs-keyword">if</span>(control_arr[i,j]==<span class="hljs-number">-1</span>)&#123;<br>                    show_arr[i,j]=<span class="hljs-number">1</span>;<br>                &#125;  <br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 递归显示无雷区域</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">showEmpty</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> i,<span class="hljs-built_in">int</span> j</span>)</span>&#123;<br>        <span class="hljs-comment">// 遇到被标记的非雷 直接翻开</span><br>        <span class="hljs-keyword">if</span>(mark_arr[i,j]==<span class="hljs-number">1</span>)&#123;<br>            mark_arr[i,j]=<span class="hljs-number">0</span>;<br>            mine_num++;<br>        &#125;            <br>        show_arr[i,j]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(control_arr[i,j]&gt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span>;<br>   <br>        <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span> &amp;&amp; show_arr[i<span class="hljs-number">-1</span>,j]==<span class="hljs-number">0</span>)<br>            showEmpty(i<span class="hljs-number">-1</span>,j);<br>        <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">15</span> &amp;&amp; show_arr[i+<span class="hljs-number">1</span>,j]==<span class="hljs-number">0</span>)<br>            showEmpty(i+<span class="hljs-number">1</span>,j);<br>        <span class="hljs-keyword">if</span>(j&gt;<span class="hljs-number">0</span> &amp;&amp; show_arr[i,j<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>)<br>            showEmpty(i,j<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(j&lt;<span class="hljs-number">19</span> &amp;&amp; show_arr[i,j+<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>)<br>            showEmpty(i,j+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span> &amp;&amp; j&gt;<span class="hljs-number">0</span> &amp;&amp; show_arr[i<span class="hljs-number">-1</span>,j<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>)<br>            showEmpty(i<span class="hljs-number">-1</span>,j<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">15</span> &amp;&amp; j&lt;<span class="hljs-number">19</span> &amp;&amp; show_arr[i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>)<br>            showEmpty(i+<span class="hljs-number">1</span>,j+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">15</span> &amp;&amp; j&gt;<span class="hljs-number">0</span> &amp;&amp; show_arr[i+<span class="hljs-number">1</span>,j<span class="hljs-number">-1</span>]==<span class="hljs-number">0</span>)<br>            showEmpty(i+<span class="hljs-number">1</span>,j<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span> &amp;&amp; j&lt;<span class="hljs-number">19</span> &amp;&amp; show_arr[i<span class="hljs-number">-1</span>,j+<span class="hljs-number">1</span>]==<span class="hljs-number">0</span>)<br>            showEmpty(i<span class="hljs-number">-1</span>,j+<span class="hljs-number">1</span>);<br>        <br>    &#125;<br></code></pre></td></tr></table></figure><p><code>showAllMine()</code>函数是使用在踩雷情况，把剩下的雷也显示出来；<code>showEmpty()</code>函数是在扫雷过程中，如果遇到一个连续空白无雷区，会把没有数字(周围一圈没有雷)的区域及围绕它们的数字显示出来。</p><p><strong>小结</strong></p><ul><li>在写控件Style的时候，感觉这也不太好设置，那也不太好设置，默认的Style风格又不太适用，整体看起来勉强过得去，有的按钮周围没有边框(比如“标”和“挖”)，就是皮肤设置的问题，做不出想要的风格，多少有点痛苦。可能还是乖乖导入Texture2D会更美观一些，但也要耗费时间去找合适的素材。</li><li>制作计时器的时候，因为OnGUI()调用频率，以及Time可以获取从游戏启动的时间，就想到了这个先floor()，再比较有无变化的这个方法计时。其他的一些协程或是延时调用的方法看起来都比较复杂，不太好实现。</li><li>关于利用Button按钮控件的“标”和“挖”来实现标雷和挖格子。似乎是在IMGUI中没能找到控件比较广泛的按键功能，只能监听到按钮被点击，无法监听是被左键或是右键点击又或是按键按下或松开这种，因此实现起来有点怪怪的并且有些麻烦。</li><li>利用自定义状态值<code>state</code>来表示不同的游戏状态，能帮助更好地实现这个游戏功能。</li></ul><p>⛵</p><h3 id="三、思考题">三、思考题</h3><ul><li><p>微软XNA引擎的Game对象屏蔽了游戏循环的细节，并使用一组虚方法让继承者完成它们，我们称这种设计为“模板方法模式”。</p><ul><li><p>为什么是“模板方法”模式而不是“策略模式”呢？</p><p>**模板方法模式：**一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</p><p>**策略模式：**是针对一组算法，将每一个算法封装到具有共同接口的独立的类中，从而使得它们可以相互替换。</p><p>– 微软XNA引擎的Game对象屏蔽了游戏循环的细节，用虚方法让继承者完成它们，更强调继承重写，明显更符合模板方法模式。</p></li></ul></li><li><p>将优先对象组成树形结构，每个节点都是游戏对象（或数）。</p><ul><li><p>尝试解释组合模式(Composite Pattern /一种设计模式)。</p><p><em>将对象组合成树形结构以表示&quot;部分-整体&quot;的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</em></p></li><li><p>使用 BroadcastMessage() 方法，向子对象发送消息。写出 BroadcastMessage() 的伪代码。</p><p><img src="/img/2022/Homework2/10.jpg" alt=""><br><img src="/img/2022/Homework2/11.jpg" alt=""><br><img src="/img/2022/Homework2/12.jpg" alt=""></p>  <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">BcM</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>  <span class="hljs-keyword">public</span> GameObject pobject;<br>  <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Update</span> ()</span> &#123;<br>pobject.BroadcastMessage(<span class="hljs-string">&quot;dbug&quot;</span>,<span class="hljs-string">&quot;inputstr&quot;</span>,SendMessageOptions.RequireReceiver);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">c1</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dbug</span>()</span>&#123;<br>        Debug.Log(<span class="hljs-string">&quot;c1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">c2</span> : <span class="hljs-title">MonoBehaviour</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dbug</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> str</span>)</span>&#123;<br>        Debug.Log(<span class="hljs-string">&quot;c2:&quot;</span>+str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/2022/Homework2/13.jpg" alt=""></p></li></ul></li><li><p>一个游戏对象用于许多部件描述不同方面的特征。我们设计坦克游戏对象不是继承于 GameObject 对象，而是 GameObject 添加一组行为部件(Component)。</p><ul><li><p>这是什么设计模式？</p><p>装饰器模式?</p></li><li><p>为什么不用继承设计特殊的游戏对象？</p><p>由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。使用继承的话，扩展不够灵活。</p></li></ul></li></ul><p>参考资料：<a href="https://www.runoob.com/design-pattern/strategy-pattern.html">策略模式</a>，<a href="https://www.runoob.com/design-pattern/template-pattern.html">模板模式</a>，<a href="https://juejin.cn/post/7031727773613817893">组合模式</a>，<a href="https://www.runoob.com/design-pattern/decorator-pattern.html">装饰器模式</a>，<a href="https://www.runoob.com/design-pattern/bridge-pattern.html">桥接模式</a>，<a href="https://blog.csdn.net/xiumang/article/details/88750110">u3d计时器</a>，<a href="https://docs.unity.cn/cn/2021.3/Manual/gui-Basics.html">IMGUI</a></p><blockquote><p>Cauchy    2022.10.04</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity</tag>
      
      <tag>IMGUI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HW1: 游戏的本质</title>
    <link href="/2022/09/06/2022/Homework1/"/>
    <url>/2022/09/06/2022/Homework1/</url>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面：我正在学习一门课程《3D游戏编程与设计》，接下来的时间，我都会在这个博客上记录我这门课的学习，请大家多多指教~</p></blockquote><span id="more"></span><h3 id="“功能游戏-严肃游戏”是什么？">“功能游戏/严肃游戏”是什么？</h3><p><em>“Serious games induce some kind of affective or motor learning  (understood in very broad sense) at any level. Put more simply: serious  games are used for more than entertainment.” (Susi et al. 2007, Breuer  &amp; Bente, 2010).</em></p><p>​从严肃游戏较早的提出看，严肃游戏不仅仅用于娱乐，或者说主要不是为了娱乐。用一个词语来比喻就是“寓教于乐”，但包含的领域不只是教育，还可能包含运动、商业、安全、军事、模拟等。但细想来看，那么非严肃游戏是不是就是纯娱乐性质的游戏呢？从小到大，我玩过许多游戏，感觉很多游戏都不是纯娱乐，比如经典的益智游戏《扫雷》，可以有助于我们锻炼思维与反应能力，那它们又是不是都是严肃游戏呢？“严肃”一词显然不是那么好理解，而“功能游戏”是我国引入“严肃游戏”时的别称，是为了让人们更好地理解这个概念。我个人的理解是，这个功能游戏在设计之初就已经带有某种功能目的，而它的载体就是游戏，是同时具有娱乐性的。而注重功能性且能平衡好娱乐性的游戏，我觉得应该就能称得上是好的功能游戏。</p><p>参考文章：<a href="https://edutechwiki.unige.ch/en/Serious_game" title=" ">EduTech Wiki</a>；<a href="https://en.wikipedia.org/wiki/Serious_game" title=" ">Wikipedia</a>；<a href="https://zhuanlan.zhihu.com/p/32908209" title=" ">知乎文章(带有个人主观性)</a></p><h3 id="分享游戏：《みんなで空気読み》">分享游戏：《みんなで空気読み》</h3><p>​🍵我个人比较喜欢的一款严肃游戏是日本游戏公司G-MODE制作的《みんなで空気読み》（又名《阅读空气》或《大家一起察言观色》），PC版于2020年在steam平台上线。目前该系列有3部，还有一部online版本可以和其他玩家在线游玩。实际上，早在2013年左右，我就已经在塞班系统上玩过这款游戏，它当时就给我留下了深刻印象。当然，那个时候我还在念小学，玩不太明白。</p><p><img src="/img/2022/Homework1/3.jpg" alt=""></p><p>​🍎“空気読み”直译过来是“读空气”，也是网络词汇“KY”(不会读空气)的由来。这个意思跟我们中文的“察言观色”或者“有眼力见儿”差不多。玩家在普通的“察言观色”模式需要做的是根据氛围，快速地判断需要作出反应。操作很简单，通过键盘上的上下左右与空格键控制即可，由于什么时候用什么按键游戏没有说明，要自己去思考探索。</p><p>​ 🍮玩法这么普通，横跨这么多年又上线不同平台，有它的道理。我认为这款游戏的<strong>创新点在于其功能性</strong>，而其功能性又在于教育，玩家通过游玩这款游戏可以注意到一些生活小细节，了解到一些日本的文化等。比如说，在日本，地铁的站位和地区有关，东京地区习惯“左站右行”，而大阪地区习惯“左行右站”；你要和一位牛头朋友(代表忌口)去吃饭，有烧肉和寿司两个选项，就需要避开含牛量较高的烧肉了；当你作为一名老师上公开课问问题时，台下几位同学都举手了，但只有一位同学看起来很高兴，就需要思考点他了… 每玩完5个场景，会给你一个反馈，例如5个都做对了(官方做法)，会告诉你“简单明了地做到了察言观色”；玩完所有场景后，会给你一个六边形结果反馈，包含决心、同情心、适应能力、责任感、敏捷思维及运用能力6个方面。</p><p><img src="/img/2022/Homework1/4.jpg" alt=""></p><p>​🍊这看起来像心理测试的游戏，有功能性的同时，当然也不失<strong>趣味性</strong>。尽管操作很简单，但是每个场景可以作出的反应是多样性的，有些甚至都不太能想到，当你做出来的时候，会get到这种幽默感。比如说，你在一个电视节目要举一个牌子，左方会有一个标题，右边有个人，正常想法是可以举左边、右边或者上面，一些神奇的操作就是不断切换左上右按键，你就会把这个牌子转起来。除了普通测试的“察言观色”模式，有可以让你无限装疯卖傻、随心所欲各种捣蛋的“不察言观色”模式，有可以和朋友本地快(ben)乐(bi)玩(hu)耍(ou)的“双人察言观色”模式，可以浏览所有场景的“剧情模式”，还有满足收集癖的成就系统“秘密”，以及看到自己在“察言观色”模式的过往表现的“以前的你”。</p><p><img src="/img/2022/Homework1/2.jpg" alt=""></p><p>​👻我一个比较深刻的感受是，可以帮助玩家更好地认识自我和理解社会的氛围。尽管各种场景都更贴近日本文化，由于一些礼仪的共通性，我们还是能很好地体会。在做出各种行为的时候，可能这个举动是可以帮助到他人的，但是自己会不会不开心；“不麻烦他人”又是不是一直都是好的；又应该选择做一个怎样的人等等。通过对比不同时期(一般是隔半年以上)的反馈结果，也能看到自己的一些变化，更好地去认识自己与了解自己。还有一点是，这款严肃游戏很好地结合<strong>教育</strong>、<strong>心理</strong>、<strong>文化</strong>等方面，对于我们东方注重礼仪的社会，是非常有价值的。</p><p><img src="/img/2022/Homework1/6.jpg" alt=""></p><blockquote><p>Cauchy 20220906</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Game</category>
      
    </categories>
    
    
    <tags>
      
      <tag>serious game</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
